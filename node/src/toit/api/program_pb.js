// source: toit/api/program.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var toit_model_program_pb = require('../../toit/model/program_pb.js');
goog.object.extend(proto, toit_model_program_pb);
goog.exportSymbol('proto.toit.api.AnalyzeRequest', null, global);
goog.exportSymbol('proto.toit.api.AnalyzeRequest.ProgramCase', null, global);
goog.exportSymbol('proto.toit.api.AnalyzeRequest.Source', null, global);
goog.exportSymbol('proto.toit.api.AnalyzeResponse', null, global);
goog.exportSymbol('proto.toit.api.AnalyzeResponse.Features', null, global);
goog.exportSymbol('proto.toit.api.CompileRequest', null, global);
goog.exportSymbol('proto.toit.api.CompileResponse', null, global);
goog.exportSymbol('proto.toit.api.DecodeSystemMessageRequest', null, global);
goog.exportSymbol('proto.toit.api.DecodeSystemMessageResponse', null, global);
goog.exportSymbol('proto.toit.api.DeviceRunRequest', null, global);
goog.exportSymbol('proto.toit.api.DeviceRunResponse', null, global);
goog.exportSymbol('proto.toit.api.DeviceRunResponse.ResponseCase', null, global);
goog.exportSymbol('proto.toit.api.GetCompilationRequest', null, global);
goog.exportSymbol('proto.toit.api.GetCompilationResponse', null, global);
goog.exportSymbol('proto.toit.api.GetProgramRequest', null, global);
goog.exportSymbol('proto.toit.api.GetProgramResponse', null, global);
goog.exportSymbol('proto.toit.api.LookupProgramsRequest', null, global);
goog.exportSymbol('proto.toit.api.LookupProgramsResponse', null, global);
goog.exportSymbol('proto.toit.api.ProgramSource', null, global);
goog.exportSymbol('proto.toit.api.ProgramSource.Bundle', null, global);
goog.exportSymbol('proto.toit.api.ProgramSource.Files', null, global);
goog.exportSymbol('proto.toit.api.ProgramSource.SourceCase', null, global);
goog.exportSymbol('proto.toit.api.RunInput', null, global);
goog.exportSymbol('proto.toit.api.RunRequest', null, global);
goog.exportSymbol('proto.toit.api.RunRequest.PayloadCase', null, global);
goog.exportSymbol('proto.toit.api.RunResponse', null, global);
goog.exportSymbol('proto.toit.api.RunResponse.ResponseCase', null, global);
goog.exportSymbol('proto.toit.api.RunStart', null, global);
goog.exportSymbol('proto.toit.api.RunStartRequest', null, global);
goog.exportSymbol('proto.toit.api.SyntaxAnalyzeRequest', null, global);
goog.exportSymbol('proto.toit.api.SyntaxAnalyzeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.ProgramSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.toit.api.ProgramSource.oneofGroups_);
};
goog.inherits(proto.toit.api.ProgramSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.ProgramSource.displayName = 'proto.toit.api.ProgramSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.ProgramSource.Files = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.ProgramSource.Files, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.ProgramSource.Files.displayName = 'proto.toit.api.ProgramSource.Files';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.ProgramSource.Bundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.ProgramSource.Bundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.ProgramSource.Bundle.displayName = 'proto.toit.api.ProgramSource.Bundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.CompileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.CompileRequest.repeatedFields_, null);
};
goog.inherits(proto.toit.api.CompileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.CompileRequest.displayName = 'proto.toit.api.CompileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.CompileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.CompileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.CompileResponse.displayName = 'proto.toit.api.CompileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.SyntaxAnalyzeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.SyntaxAnalyzeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.SyntaxAnalyzeRequest.displayName = 'proto.toit.api.SyntaxAnalyzeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.SyntaxAnalyzeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.SyntaxAnalyzeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.SyntaxAnalyzeResponse.displayName = 'proto.toit.api.SyntaxAnalyzeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.AnalyzeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.toit.api.AnalyzeRequest.oneofGroups_);
};
goog.inherits(proto.toit.api.AnalyzeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.AnalyzeRequest.displayName = 'proto.toit.api.AnalyzeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.AnalyzeRequest.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.AnalyzeRequest.Source.repeatedFields_, null);
};
goog.inherits(proto.toit.api.AnalyzeRequest.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.AnalyzeRequest.Source.displayName = 'proto.toit.api.AnalyzeRequest.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.AnalyzeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.AnalyzeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.AnalyzeResponse.displayName = 'proto.toit.api.AnalyzeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.AnalyzeResponse.Features = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.AnalyzeResponse.Features.repeatedFields_, null);
};
goog.inherits(proto.toit.api.AnalyzeResponse.Features, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.AnalyzeResponse.Features.displayName = 'proto.toit.api.AnalyzeResponse.Features';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.GetProgramRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.GetProgramRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.GetProgramRequest.displayName = 'proto.toit.api.GetProgramRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.GetProgramResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.GetProgramResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.GetProgramResponse.displayName = 'proto.toit.api.GetProgramResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.GetCompilationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.GetCompilationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.GetCompilationRequest.displayName = 'proto.toit.api.GetCompilationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.GetCompilationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.GetCompilationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.GetCompilationResponse.displayName = 'proto.toit.api.GetCompilationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.LookupProgramsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.LookupProgramsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.LookupProgramsRequest.displayName = 'proto.toit.api.LookupProgramsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.LookupProgramsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.LookupProgramsResponse.repeatedFields_, null);
};
goog.inherits(proto.toit.api.LookupProgramsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.LookupProgramsResponse.displayName = 'proto.toit.api.LookupProgramsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.RunRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.toit.api.RunRequest.oneofGroups_);
};
goog.inherits(proto.toit.api.RunRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.RunRequest.displayName = 'proto.toit.api.RunRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.RunStart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.RunStart.repeatedFields_, null);
};
goog.inherits(proto.toit.api.RunStart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.RunStart.displayName = 'proto.toit.api.RunStart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.RunInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.RunInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.RunInput.displayName = 'proto.toit.api.RunInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.RunStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.RunStartRequest.repeatedFields_, null);
};
goog.inherits(proto.toit.api.RunStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.RunStartRequest.displayName = 'proto.toit.api.RunStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.RunResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.toit.api.RunResponse.oneofGroups_);
};
goog.inherits(proto.toit.api.RunResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.RunResponse.displayName = 'proto.toit.api.RunResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.DeviceRunRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.toit.api.DeviceRunRequest.repeatedFields_, null);
};
goog.inherits(proto.toit.api.DeviceRunRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.DeviceRunRequest.displayName = 'proto.toit.api.DeviceRunRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.DeviceRunResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.toit.api.DeviceRunResponse.oneofGroups_);
};
goog.inherits(proto.toit.api.DeviceRunResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.DeviceRunResponse.displayName = 'proto.toit.api.DeviceRunResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.DecodeSystemMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.DecodeSystemMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.DecodeSystemMessageRequest.displayName = 'proto.toit.api.DecodeSystemMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.toit.api.DecodeSystemMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.toit.api.DecodeSystemMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.toit.api.DecodeSystemMessageResponse.displayName = 'proto.toit.api.DecodeSystemMessageResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.toit.api.ProgramSource.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.toit.api.ProgramSource.SourceCase = {
  SOURCE_NOT_SET: 0,
  FILES: 1,
  BUNDLE: 2
};

/**
 * @return {proto.toit.api.ProgramSource.SourceCase}
 */
proto.toit.api.ProgramSource.prototype.getSourceCase = function() {
  return /** @type {proto.toit.api.ProgramSource.SourceCase} */(jspb.Message.computeOneofCase(this, proto.toit.api.ProgramSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.ProgramSource.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.ProgramSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.ProgramSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.ProgramSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    files: (f = msg.getFiles()) && proto.toit.api.ProgramSource.Files.toObject(includeInstance, f),
    bundle: (f = msg.getBundle()) && proto.toit.api.ProgramSource.Bundle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.ProgramSource}
 */
proto.toit.api.ProgramSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.ProgramSource;
  return proto.toit.api.ProgramSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.ProgramSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.ProgramSource}
 */
proto.toit.api.ProgramSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.toit.api.ProgramSource.Files;
      reader.readMessage(value,proto.toit.api.ProgramSource.Files.deserializeBinaryFromReader);
      msg.setFiles(value);
      break;
    case 2:
      var value = new proto.toit.api.ProgramSource.Bundle;
      reader.readMessage(value,proto.toit.api.ProgramSource.Bundle.deserializeBinaryFromReader);
      msg.setBundle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.ProgramSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.ProgramSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.ProgramSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.ProgramSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiles();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.toit.api.ProgramSource.Files.serializeBinaryToWriter
    );
  }
  f = message.getBundle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.toit.api.ProgramSource.Bundle.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.ProgramSource.Files.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.ProgramSource.Files.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.ProgramSource.Files} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.ProgramSource.Files.toObject = function(includeInstance, msg) {
  var f, obj = {
    entryFilename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filesMap: (f = msg.getFilesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.ProgramSource.Files}
 */
proto.toit.api.ProgramSource.Files.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.ProgramSource.Files;
  return proto.toit.api.ProgramSource.Files.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.ProgramSource.Files} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.ProgramSource.Files}
 */
proto.toit.api.ProgramSource.Files.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFilename(value);
      break;
    case 2:
      var value = msg.getFilesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.ProgramSource.Files.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.ProgramSource.Files.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.ProgramSource.Files} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.ProgramSource.Files.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntryFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional string entry_filename = 1;
 * @return {string}
 */
proto.toit.api.ProgramSource.Files.prototype.getEntryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.ProgramSource.Files} returns this
 */
proto.toit.api.ProgramSource.Files.prototype.setEntryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, bytes> files = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.ProgramSource.Files.prototype.getFilesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.ProgramSource.Files} returns this
 */
proto.toit.api.ProgramSource.Files.prototype.clearFilesMap = function() {
  this.getFilesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.ProgramSource.Bundle.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.ProgramSource.Bundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.ProgramSource.Bundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.ProgramSource.Bundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    bundle: msg.getBundle_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.ProgramSource.Bundle}
 */
proto.toit.api.ProgramSource.Bundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.ProgramSource.Bundle;
  return proto.toit.api.ProgramSource.Bundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.ProgramSource.Bundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.ProgramSource.Bundle}
 */
proto.toit.api.ProgramSource.Bundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBundle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.ProgramSource.Bundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.ProgramSource.Bundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.ProgramSource.Bundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.ProgramSource.Bundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBundle_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bundle = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.ProgramSource.Bundle.prototype.getBundle = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bundle = 1;
 * This is a type-conversion wrapper around `getBundle()`
 * @return {string}
 */
proto.toit.api.ProgramSource.Bundle.prototype.getBundle_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBundle()));
};


/**
 * optional bytes bundle = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBundle()`
 * @return {!Uint8Array}
 */
proto.toit.api.ProgramSource.Bundle.prototype.getBundle_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBundle()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.ProgramSource.Bundle} returns this
 */
proto.toit.api.ProgramSource.Bundle.prototype.setBundle = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Files files = 1;
 * @return {?proto.toit.api.ProgramSource.Files}
 */
proto.toit.api.ProgramSource.prototype.getFiles = function() {
  return /** @type{?proto.toit.api.ProgramSource.Files} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.ProgramSource.Files, 1));
};


/**
 * @param {?proto.toit.api.ProgramSource.Files|undefined} value
 * @return {!proto.toit.api.ProgramSource} returns this
*/
proto.toit.api.ProgramSource.prototype.setFiles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.toit.api.ProgramSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.ProgramSource} returns this
 */
proto.toit.api.ProgramSource.prototype.clearFiles = function() {
  return this.setFiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.ProgramSource.prototype.hasFiles = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Bundle bundle = 2;
 * @return {?proto.toit.api.ProgramSource.Bundle}
 */
proto.toit.api.ProgramSource.prototype.getBundle = function() {
  return /** @type{?proto.toit.api.ProgramSource.Bundle} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.ProgramSource.Bundle, 2));
};


/**
 * @param {?proto.toit.api.ProgramSource.Bundle|undefined} value
 * @return {!proto.toit.api.ProgramSource} returns this
*/
proto.toit.api.ProgramSource.prototype.setBundle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.toit.api.ProgramSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.ProgramSource} returns this
 */
proto.toit.api.ProgramSource.prototype.clearBundle = function() {
  return this.setBundle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.ProgramSource.prototype.hasBundle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.CompileRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.CompileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.CompileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.CompileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.CompileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    programName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sdkName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entryFilename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, undefined) : [],
    argsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    source: (f = msg.getSource()) && proto.toit.api.ProgramSource.toObject(includeInstance, f),
    firmwareModel: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.CompileRequest}
 */
proto.toit.api.CompileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.CompileRequest;
  return proto.toit.api.CompileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.CompileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.CompileRequest}
 */
proto.toit.api.CompileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProgramName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFilename(value);
      break;
    case 4:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 6:
      var value = new proto.toit.api.ProgramSource;
      reader.readMessage(value,proto.toit.api.ProgramSource.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmwareModel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.CompileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.CompileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.CompileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.CompileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSdkName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntryFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.toit.api.ProgramSource.serializeBinaryToWriter
    );
  }
  f = message.getFirmwareModel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string program_name = 1;
 * @return {string}
 */
proto.toit.api.CompileRequest.prototype.getProgramName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.setProgramName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sdk_name = 2;
 * @return {string}
 */
proto.toit.api.CompileRequest.prototype.getSdkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.setSdkName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entry_filename = 3;
 * @return {string}
 */
proto.toit.api.CompileRequest.prototype.getEntryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.setEntryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, bytes> sources = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.CompileRequest.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;};


/**
 * repeated string args = 5;
 * @return {!Array<string>}
 */
proto.toit.api.CompileRequest.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional ProgramSource source = 6;
 * @return {?proto.toit.api.ProgramSource}
 */
proto.toit.api.CompileRequest.prototype.getSource = function() {
  return /** @type{?proto.toit.api.ProgramSource} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.ProgramSource, 6));
};


/**
 * @param {?proto.toit.api.ProgramSource|undefined} value
 * @return {!proto.toit.api.CompileRequest} returns this
*/
proto.toit.api.CompileRequest.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.CompileRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string firmware_model = 7;
 * @return {string}
 */
proto.toit.api.CompileRequest.prototype.getFirmwareModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.CompileRequest} returns this
 */
proto.toit.api.CompileRequest.prototype.setFirmwareModel = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.CompileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.CompileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.CompileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.CompileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    compilation: (f = msg.getCompilation()) && toit_model_program_pb.Compilation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.CompileResponse}
 */
proto.toit.api.CompileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.CompileResponse;
  return proto.toit.api.CompileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.CompileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.CompileResponse}
 */
proto.toit.api.CompileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new toit_model_program_pb.Compilation;
      reader.readMessage(value,toit_model_program_pb.Compilation.deserializeBinaryFromReader);
      msg.setCompilation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.CompileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.CompileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.CompileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.CompileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompilation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      toit_model_program_pb.Compilation.serializeBinaryToWriter
    );
  }
};


/**
 * optional toit.model.Compilation compilation = 1;
 * @return {?proto.toit.model.Compilation}
 */
proto.toit.api.CompileResponse.prototype.getCompilation = function() {
  return /** @type{?proto.toit.model.Compilation} */ (
    jspb.Message.getWrapperField(this, toit_model_program_pb.Compilation, 1));
};


/**
 * @param {?proto.toit.model.Compilation|undefined} value
 * @return {!proto.toit.api.CompileResponse} returns this
*/
proto.toit.api.CompileResponse.prototype.setCompilation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.CompileResponse} returns this
 */
proto.toit.api.CompileResponse.prototype.clearCompilation = function() {
  return this.setCompilation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.CompileResponse.prototype.hasCompilation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.SyntaxAnalyzeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.SyntaxAnalyzeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.SyntaxAnalyzeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entryFile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sdkName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.SyntaxAnalyzeRequest}
 */
proto.toit.api.SyntaxAnalyzeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.SyntaxAnalyzeRequest;
  return proto.toit.api.SyntaxAnalyzeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.SyntaxAnalyzeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.SyntaxAnalyzeRequest}
 */
proto.toit.api.SyntaxAnalyzeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkName(value);
      break;
    case 3:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.SyntaxAnalyzeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.SyntaxAnalyzeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.SyntaxAnalyzeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntryFile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSdkName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional string entry_file = 1;
 * @return {string}
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.getEntryFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.SyntaxAnalyzeRequest} returns this
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.setEntryFile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sdk_name = 2;
 * @return {string}
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.getSdkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.SyntaxAnalyzeRequest} returns this
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.setSdkName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, bytes> sources = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.SyntaxAnalyzeRequest} returns this
 */
proto.toit.api.SyntaxAnalyzeRequest.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.SyntaxAnalyzeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.SyntaxAnalyzeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.SyntaxAnalyzeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.SyntaxAnalyzeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: msg.getResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.SyntaxAnalyzeResponse}
 */
proto.toit.api.SyntaxAnalyzeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.SyntaxAnalyzeResponse;
  return proto.toit.api.SyntaxAnalyzeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.SyntaxAnalyzeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.SyntaxAnalyzeResponse}
 */
proto.toit.api.SyntaxAnalyzeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.SyntaxAnalyzeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.SyntaxAnalyzeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.SyntaxAnalyzeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.SyntaxAnalyzeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes response = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.SyntaxAnalyzeResponse.prototype.getResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes response = 1;
 * This is a type-conversion wrapper around `getResponse()`
 * @return {string}
 */
proto.toit.api.SyntaxAnalyzeResponse.prototype.getResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponse()));
};


/**
 * optional bytes response = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponse()`
 * @return {!Uint8Array}
 */
proto.toit.api.SyntaxAnalyzeResponse.prototype.getResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.SyntaxAnalyzeResponse} returns this
 */
proto.toit.api.SyntaxAnalyzeResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.toit.api.AnalyzeRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.toit.api.AnalyzeRequest.ProgramCase = {
  PROGRAM_NOT_SET: 0,
  SOURCE: 1,
  COMPILATION_ID: 2
};

/**
 * @return {proto.toit.api.AnalyzeRequest.ProgramCase}
 */
proto.toit.api.AnalyzeRequest.prototype.getProgramCase = function() {
  return /** @type {proto.toit.api.AnalyzeRequest.ProgramCase} */(jspb.Message.computeOneofCase(this, proto.toit.api.AnalyzeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.AnalyzeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.AnalyzeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.AnalyzeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.toit.api.AnalyzeRequest.Source.toObject(includeInstance, f),
    compilationId: msg.getCompilationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.AnalyzeRequest}
 */
proto.toit.api.AnalyzeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.AnalyzeRequest;
  return proto.toit.api.AnalyzeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.AnalyzeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.AnalyzeRequest}
 */
proto.toit.api.AnalyzeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.toit.api.AnalyzeRequest.Source;
      reader.readMessage(value,proto.toit.api.AnalyzeRequest.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCompilationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.AnalyzeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.AnalyzeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.AnalyzeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.toit.api.AnalyzeRequest.Source.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.AnalyzeRequest.Source.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.AnalyzeRequest.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.AnalyzeRequest.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.AnalyzeRequest.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeRequest.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entryFilename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, undefined) : [],
    argsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.AnalyzeRequest.Source}
 */
proto.toit.api.AnalyzeRequest.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.AnalyzeRequest.Source;
  return proto.toit.api.AnalyzeRequest.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.AnalyzeRequest.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.AnalyzeRequest.Source}
 */
proto.toit.api.AnalyzeRequest.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFilename(value);
      break;
    case 3:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.AnalyzeRequest.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.AnalyzeRequest.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.AnalyzeRequest.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeRequest.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntryFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string sdk_name = 1;
 * @return {string}
 */
proto.toit.api.AnalyzeRequest.Source.prototype.getSdkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.AnalyzeRequest.Source} returns this
 */
proto.toit.api.AnalyzeRequest.Source.prototype.setSdkName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string entry_filename = 2;
 * @return {string}
 */
proto.toit.api.AnalyzeRequest.Source.prototype.getEntryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.AnalyzeRequest.Source} returns this
 */
proto.toit.api.AnalyzeRequest.Source.prototype.setEntryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, bytes> sources = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.AnalyzeRequest.Source.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.AnalyzeRequest.Source} returns this
 */
proto.toit.api.AnalyzeRequest.Source.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;};


/**
 * repeated string args = 4;
 * @return {!Array<string>}
 */
proto.toit.api.AnalyzeRequest.Source.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.toit.api.AnalyzeRequest.Source} returns this
 */
proto.toit.api.AnalyzeRequest.Source.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.AnalyzeRequest.Source} returns this
 */
proto.toit.api.AnalyzeRequest.Source.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.AnalyzeRequest.Source} returns this
 */
proto.toit.api.AnalyzeRequest.Source.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional Source source = 1;
 * @return {?proto.toit.api.AnalyzeRequest.Source}
 */
proto.toit.api.AnalyzeRequest.prototype.getSource = function() {
  return /** @type{?proto.toit.api.AnalyzeRequest.Source} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.AnalyzeRequest.Source, 1));
};


/**
 * @param {?proto.toit.api.AnalyzeRequest.Source|undefined} value
 * @return {!proto.toit.api.AnalyzeRequest} returns this
*/
proto.toit.api.AnalyzeRequest.prototype.setSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.toit.api.AnalyzeRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.AnalyzeRequest} returns this
 */
proto.toit.api.AnalyzeRequest.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.AnalyzeRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes compilation_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.AnalyzeRequest.prototype.getCompilationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes compilation_id = 2;
 * This is a type-conversion wrapper around `getCompilationId()`
 * @return {string}
 */
proto.toit.api.AnalyzeRequest.prototype.getCompilationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCompilationId()));
};


/**
 * optional bytes compilation_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCompilationId()`
 * @return {!Uint8Array}
 */
proto.toit.api.AnalyzeRequest.prototype.getCompilationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCompilationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.AnalyzeRequest} returns this
 */
proto.toit.api.AnalyzeRequest.prototype.setCompilationId = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.toit.api.AnalyzeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.AnalyzeRequest} returns this
 */
proto.toit.api.AnalyzeRequest.prototype.clearCompilationId = function() {
  return jspb.Message.setOneofField(this, 2, proto.toit.api.AnalyzeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.AnalyzeRequest.prototype.hasCompilationId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.AnalyzeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.AnalyzeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.AnalyzeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stderr: msg.getStderr_asB64(),
    features: (f = msg.getFeatures()) && proto.toit.api.AnalyzeResponse.Features.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.AnalyzeResponse}
 */
proto.toit.api.AnalyzeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.AnalyzeResponse;
  return proto.toit.api.AnalyzeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.AnalyzeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.AnalyzeResponse}
 */
proto.toit.api.AnalyzeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStderr(value);
      break;
    case 2:
      var value = new proto.toit.api.AnalyzeResponse.Features;
      reader.readMessage(value,proto.toit.api.AnalyzeResponse.Features.deserializeBinaryFromReader);
      msg.setFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.AnalyzeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.AnalyzeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.AnalyzeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStderr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.toit.api.AnalyzeResponse.Features.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.AnalyzeResponse.Features.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.AnalyzeResponse.Features.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.AnalyzeResponse.Features.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.AnalyzeResponse.Features} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeResponse.Features.toObject = function(includeInstance, msg) {
  var f, obj = {
    gps: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    pubsubSubscriptionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.AnalyzeResponse.Features}
 */
proto.toit.api.AnalyzeResponse.Features.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.AnalyzeResponse.Features;
  return proto.toit.api.AnalyzeResponse.Features.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.AnalyzeResponse.Features} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.AnalyzeResponse.Features}
 */
proto.toit.api.AnalyzeResponse.Features.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGps(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPubsubSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.AnalyzeResponse.Features.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.AnalyzeResponse.Features.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.AnalyzeResponse.Features} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.AnalyzeResponse.Features.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGps();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPubsubSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool gps = 1;
 * @return {boolean}
 */
proto.toit.api.AnalyzeResponse.Features.prototype.getGps = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.toit.api.AnalyzeResponse.Features} returns this
 */
proto.toit.api.AnalyzeResponse.Features.prototype.setGps = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string pubsub_subscriptions = 2;
 * @return {!Array<string>}
 */
proto.toit.api.AnalyzeResponse.Features.prototype.getPubsubSubscriptionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.toit.api.AnalyzeResponse.Features} returns this
 */
proto.toit.api.AnalyzeResponse.Features.prototype.setPubsubSubscriptionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.AnalyzeResponse.Features} returns this
 */
proto.toit.api.AnalyzeResponse.Features.prototype.addPubsubSubscriptions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.AnalyzeResponse.Features} returns this
 */
proto.toit.api.AnalyzeResponse.Features.prototype.clearPubsubSubscriptionsList = function() {
  return this.setPubsubSubscriptionsList([]);
};


/**
 * optional bytes stderr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.AnalyzeResponse.prototype.getStderr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes stderr = 1;
 * This is a type-conversion wrapper around `getStderr()`
 * @return {string}
 */
proto.toit.api.AnalyzeResponse.prototype.getStderr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStderr()));
};


/**
 * optional bytes stderr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStderr()`
 * @return {!Uint8Array}
 */
proto.toit.api.AnalyzeResponse.prototype.getStderr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStderr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.AnalyzeResponse} returns this
 */
proto.toit.api.AnalyzeResponse.prototype.setStderr = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Features features = 2;
 * @return {?proto.toit.api.AnalyzeResponse.Features}
 */
proto.toit.api.AnalyzeResponse.prototype.getFeatures = function() {
  return /** @type{?proto.toit.api.AnalyzeResponse.Features} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.AnalyzeResponse.Features, 2));
};


/**
 * @param {?proto.toit.api.AnalyzeResponse.Features|undefined} value
 * @return {!proto.toit.api.AnalyzeResponse} returns this
*/
proto.toit.api.AnalyzeResponse.prototype.setFeatures = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.AnalyzeResponse} returns this
 */
proto.toit.api.AnalyzeResponse.prototype.clearFeatures = function() {
  return this.setFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.AnalyzeResponse.prototype.hasFeatures = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.GetProgramRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.GetProgramRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.GetProgramRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetProgramRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    programId: msg.getProgramId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.GetProgramRequest}
 */
proto.toit.api.GetProgramRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.GetProgramRequest;
  return proto.toit.api.GetProgramRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.GetProgramRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.GetProgramRequest}
 */
proto.toit.api.GetProgramRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProgramId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.GetProgramRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.GetProgramRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.GetProgramRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetProgramRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes program_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.GetProgramRequest.prototype.getProgramId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes program_id = 1;
 * This is a type-conversion wrapper around `getProgramId()`
 * @return {string}
 */
proto.toit.api.GetProgramRequest.prototype.getProgramId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProgramId()));
};


/**
 * optional bytes program_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProgramId()`
 * @return {!Uint8Array}
 */
proto.toit.api.GetProgramRequest.prototype.getProgramId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProgramId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.GetProgramRequest} returns this
 */
proto.toit.api.GetProgramRequest.prototype.setProgramId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.GetProgramResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.GetProgramResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.GetProgramResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetProgramResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    program: (f = msg.getProgram()) && toit_model_program_pb.Program.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.GetProgramResponse}
 */
proto.toit.api.GetProgramResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.GetProgramResponse;
  return proto.toit.api.GetProgramResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.GetProgramResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.GetProgramResponse}
 */
proto.toit.api.GetProgramResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new toit_model_program_pb.Program;
      reader.readMessage(value,toit_model_program_pb.Program.deserializeBinaryFromReader);
      msg.setProgram(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.GetProgramResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.GetProgramResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.GetProgramResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetProgramResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgram();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      toit_model_program_pb.Program.serializeBinaryToWriter
    );
  }
};


/**
 * optional toit.model.Program program = 1;
 * @return {?proto.toit.model.Program}
 */
proto.toit.api.GetProgramResponse.prototype.getProgram = function() {
  return /** @type{?proto.toit.model.Program} */ (
    jspb.Message.getWrapperField(this, toit_model_program_pb.Program, 1));
};


/**
 * @param {?proto.toit.model.Program|undefined} value
 * @return {!proto.toit.api.GetProgramResponse} returns this
*/
proto.toit.api.GetProgramResponse.prototype.setProgram = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.GetProgramResponse} returns this
 */
proto.toit.api.GetProgramResponse.prototype.clearProgram = function() {
  return this.setProgram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.GetProgramResponse.prototype.hasProgram = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.GetCompilationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.GetCompilationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.GetCompilationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetCompilationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    compilationId: msg.getCompilationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.GetCompilationRequest}
 */
proto.toit.api.GetCompilationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.GetCompilationRequest;
  return proto.toit.api.GetCompilationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.GetCompilationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.GetCompilationRequest}
 */
proto.toit.api.GetCompilationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCompilationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.GetCompilationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.GetCompilationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.GetCompilationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetCompilationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompilationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes compilation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.GetCompilationRequest.prototype.getCompilationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes compilation_id = 1;
 * This is a type-conversion wrapper around `getCompilationId()`
 * @return {string}
 */
proto.toit.api.GetCompilationRequest.prototype.getCompilationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCompilationId()));
};


/**
 * optional bytes compilation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCompilationId()`
 * @return {!Uint8Array}
 */
proto.toit.api.GetCompilationRequest.prototype.getCompilationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCompilationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.GetCompilationRequest} returns this
 */
proto.toit.api.GetCompilationRequest.prototype.setCompilationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.GetCompilationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.GetCompilationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.GetCompilationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetCompilationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    compilation: (f = msg.getCompilation()) && toit_model_program_pb.Compilation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.GetCompilationResponse}
 */
proto.toit.api.GetCompilationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.GetCompilationResponse;
  return proto.toit.api.GetCompilationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.GetCompilationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.GetCompilationResponse}
 */
proto.toit.api.GetCompilationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new toit_model_program_pb.Compilation;
      reader.readMessage(value,toit_model_program_pb.Compilation.deserializeBinaryFromReader);
      msg.setCompilation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.GetCompilationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.GetCompilationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.GetCompilationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.GetCompilationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompilation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      toit_model_program_pb.Compilation.serializeBinaryToWriter
    );
  }
};


/**
 * optional toit.model.Compilation compilation = 1;
 * @return {?proto.toit.model.Compilation}
 */
proto.toit.api.GetCompilationResponse.prototype.getCompilation = function() {
  return /** @type{?proto.toit.model.Compilation} */ (
    jspb.Message.getWrapperField(this, toit_model_program_pb.Compilation, 1));
};


/**
 * @param {?proto.toit.model.Compilation|undefined} value
 * @return {!proto.toit.api.GetCompilationResponse} returns this
*/
proto.toit.api.GetCompilationResponse.prototype.setCompilation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.GetCompilationResponse} returns this
 */
proto.toit.api.GetCompilationResponse.prototype.clearCompilation = function() {
  return this.setCompilation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.GetCompilationResponse.prototype.hasCompilation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.LookupProgramsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.LookupProgramsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.LookupProgramsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.LookupProgramsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    programName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.LookupProgramsRequest}
 */
proto.toit.api.LookupProgramsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.LookupProgramsRequest;
  return proto.toit.api.LookupProgramsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.LookupProgramsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.LookupProgramsRequest}
 */
proto.toit.api.LookupProgramsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProgramName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.LookupProgramsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.LookupProgramsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.LookupProgramsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.LookupProgramsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string program_name = 1;
 * @return {string}
 */
proto.toit.api.LookupProgramsRequest.prototype.getProgramName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.LookupProgramsRequest} returns this
 */
proto.toit.api.LookupProgramsRequest.prototype.setProgramName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.LookupProgramsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.LookupProgramsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.LookupProgramsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.LookupProgramsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.LookupProgramsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    programIdsList: msg.getProgramIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.LookupProgramsResponse}
 */
proto.toit.api.LookupProgramsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.LookupProgramsResponse;
  return proto.toit.api.LookupProgramsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.LookupProgramsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.LookupProgramsResponse}
 */
proto.toit.api.LookupProgramsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProgramIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.LookupProgramsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.LookupProgramsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.LookupProgramsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.LookupProgramsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes program_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.toit.api.LookupProgramsResponse.prototype.getProgramIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes program_ids = 1;
 * This is a type-conversion wrapper around `getProgramIdsList()`
 * @return {!Array<string>}
 */
proto.toit.api.LookupProgramsResponse.prototype.getProgramIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProgramIdsList()));
};


/**
 * repeated bytes program_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProgramIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.toit.api.LookupProgramsResponse.prototype.getProgramIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProgramIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.toit.api.LookupProgramsResponse} returns this
 */
proto.toit.api.LookupProgramsResponse.prototype.setProgramIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.LookupProgramsResponse} returns this
 */
proto.toit.api.LookupProgramsResponse.prototype.addProgramIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.LookupProgramsResponse} returns this
 */
proto.toit.api.LookupProgramsResponse.prototype.clearProgramIdsList = function() {
  return this.setProgramIdsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.toit.api.RunRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.toit.api.RunRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  START: 1,
  INPUT: 2
};

/**
 * @return {proto.toit.api.RunRequest.PayloadCase}
 */
proto.toit.api.RunRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.toit.api.RunRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.toit.api.RunRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.RunRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.RunRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.RunRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.toit.api.RunStart.toObject(includeInstance, f),
    input: (f = msg.getInput()) && proto.toit.api.RunInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.RunRequest}
 */
proto.toit.api.RunRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.RunRequest;
  return proto.toit.api.RunRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.RunRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.RunRequest}
 */
proto.toit.api.RunRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.toit.api.RunStart;
      reader.readMessage(value,proto.toit.api.RunStart.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.toit.api.RunInput;
      reader.readMessage(value,proto.toit.api.RunInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.RunRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.RunRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.RunRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.toit.api.RunStart.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.toit.api.RunInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional RunStart start = 1;
 * @return {?proto.toit.api.RunStart}
 */
proto.toit.api.RunRequest.prototype.getStart = function() {
  return /** @type{?proto.toit.api.RunStart} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.RunStart, 1));
};


/**
 * @param {?proto.toit.api.RunStart|undefined} value
 * @return {!proto.toit.api.RunRequest} returns this
*/
proto.toit.api.RunRequest.prototype.setStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.toit.api.RunRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.RunRequest} returns this
 */
proto.toit.api.RunRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RunInput input = 2;
 * @return {?proto.toit.api.RunInput}
 */
proto.toit.api.RunRequest.prototype.getInput = function() {
  return /** @type{?proto.toit.api.RunInput} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.RunInput, 2));
};


/**
 * @param {?proto.toit.api.RunInput|undefined} value
 * @return {!proto.toit.api.RunRequest} returns this
*/
proto.toit.api.RunRequest.prototype.setInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.toit.api.RunRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.RunRequest} returns this
 */
proto.toit.api.RunRequest.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunRequest.prototype.hasInput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.RunStart.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.RunStart.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.RunStart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.RunStart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunStart.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entryFilename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, undefined) : [],
    argsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    source: (f = msg.getSource()) && proto.toit.api.ProgramSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.RunStart}
 */
proto.toit.api.RunStart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.RunStart;
  return proto.toit.api.RunStart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.RunStart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.RunStart}
 */
proto.toit.api.RunStart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFilename(value);
      break;
    case 3:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 5:
      var value = new proto.toit.api.ProgramSource;
      reader.readMessage(value,proto.toit.api.ProgramSource.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.RunStart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.RunStart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.RunStart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunStart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntryFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.toit.api.ProgramSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sdk_name = 1;
 * @return {string}
 */
proto.toit.api.RunStart.prototype.getSdkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.setSdkName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string entry_filename = 2;
 * @return {string}
 */
proto.toit.api.RunStart.prototype.getEntryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.setEntryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, bytes> sources = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.RunStart.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;};


/**
 * repeated string args = 4;
 * @return {!Array<string>}
 */
proto.toit.api.RunStart.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional ProgramSource source = 5;
 * @return {?proto.toit.api.ProgramSource}
 */
proto.toit.api.RunStart.prototype.getSource = function() {
  return /** @type{?proto.toit.api.ProgramSource} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.ProgramSource, 5));
};


/**
 * @param {?proto.toit.api.ProgramSource|undefined} value
 * @return {!proto.toit.api.RunStart} returns this
*/
proto.toit.api.RunStart.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.RunStart} returns this
 */
proto.toit.api.RunStart.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunStart.prototype.hasSource = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.RunInput.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.RunInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.RunInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: msg.getInput_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.RunInput}
 */
proto.toit.api.RunInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.RunInput;
  return proto.toit.api.RunInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.RunInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.RunInput}
 */
proto.toit.api.RunInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.RunInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.RunInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.RunInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes input = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.RunInput.prototype.getInput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes input = 1;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.toit.api.RunInput.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes input = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.toit.api.RunInput.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.RunInput} returns this
 */
proto.toit.api.RunInput.prototype.setInput = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.RunStartRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.RunStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.RunStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.RunStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entryFilename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, undefined) : [],
    argsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    source: (f = msg.getSource()) && proto.toit.api.ProgramSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.RunStartRequest}
 */
proto.toit.api.RunStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.RunStartRequest;
  return proto.toit.api.RunStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.RunStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.RunStartRequest}
 */
proto.toit.api.RunStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdkName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFilename(value);
      break;
    case 3:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 5:
      var value = new proto.toit.api.ProgramSource;
      reader.readMessage(value,proto.toit.api.ProgramSource.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.RunStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.RunStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.RunStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntryFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.toit.api.ProgramSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sdk_name = 1;
 * @return {string}
 */
proto.toit.api.RunStartRequest.prototype.getSdkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.setSdkName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string entry_filename = 2;
 * @return {string}
 */
proto.toit.api.RunStartRequest.prototype.getEntryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.setEntryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, bytes> sources = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.RunStartRequest.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;};


/**
 * repeated string args = 4;
 * @return {!Array<string>}
 */
proto.toit.api.RunStartRequest.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional ProgramSource source = 5;
 * @return {?proto.toit.api.ProgramSource}
 */
proto.toit.api.RunStartRequest.prototype.getSource = function() {
  return /** @type{?proto.toit.api.ProgramSource} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.ProgramSource, 5));
};


/**
 * @param {?proto.toit.api.ProgramSource|undefined} value
 * @return {!proto.toit.api.RunStartRequest} returns this
*/
proto.toit.api.RunStartRequest.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.RunStartRequest} returns this
 */
proto.toit.api.RunStartRequest.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunStartRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.toit.api.RunResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.toit.api.RunResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  OUT: 1,
  ERR: 2,
  EXIT: 3
};

/**
 * @return {proto.toit.api.RunResponse.ResponseCase}
 */
proto.toit.api.RunResponse.prototype.getResponseCase = function() {
  return /** @type {proto.toit.api.RunResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.toit.api.RunResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.RunResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.RunResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.RunResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    out: msg.getOut_asB64(),
    err: msg.getErr_asB64(),
    exit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.RunResponse}
 */
proto.toit.api.RunResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.RunResponse;
  return proto.toit.api.RunResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.RunResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.RunResponse}
 */
proto.toit.api.RunResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOut(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.RunResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.RunResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.RunResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.RunResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes out = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.RunResponse.prototype.getOut = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes out = 1;
 * This is a type-conversion wrapper around `getOut()`
 * @return {string}
 */
proto.toit.api.RunResponse.prototype.getOut_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOut()));
};


/**
 * optional bytes out = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOut()`
 * @return {!Uint8Array}
 */
proto.toit.api.RunResponse.prototype.getOut_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOut()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.RunResponse} returns this
 */
proto.toit.api.RunResponse.prototype.setOut = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.toit.api.RunResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.RunResponse} returns this
 */
proto.toit.api.RunResponse.prototype.clearOut = function() {
  return jspb.Message.setOneofField(this, 1, proto.toit.api.RunResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunResponse.prototype.hasOut = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes err = 2;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.RunResponse.prototype.getErr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err = 2;
 * This is a type-conversion wrapper around `getErr()`
 * @return {string}
 */
proto.toit.api.RunResponse.prototype.getErr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErr()));
};


/**
 * optional bytes err = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErr()`
 * @return {!Uint8Array}
 */
proto.toit.api.RunResponse.prototype.getErr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.RunResponse} returns this
 */
proto.toit.api.RunResponse.prototype.setErr = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.toit.api.RunResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.RunResponse} returns this
 */
proto.toit.api.RunResponse.prototype.clearErr = function() {
  return jspb.Message.setOneofField(this, 2, proto.toit.api.RunResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunResponse.prototype.hasErr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 exit = 3;
 * @return {number}
 */
proto.toit.api.RunResponse.prototype.getExit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.toit.api.RunResponse} returns this
 */
proto.toit.api.RunResponse.prototype.setExit = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.toit.api.RunResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.RunResponse} returns this
 */
proto.toit.api.RunResponse.prototype.clearExit = function() {
  return jspb.Message.setOneofField(this, 3, proto.toit.api.RunResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.RunResponse.prototype.hasExit = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.toit.api.DeviceRunRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.DeviceRunRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.DeviceRunRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.DeviceRunRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DeviceRunRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: msg.getDeviceId_asB64(),
    entryFilename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sourcesMap: (f = msg.getSourcesMap()) ? f.toObject(includeInstance, undefined) : [],
    argsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    install: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    source: (f = msg.getSource()) && proto.toit.api.ProgramSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.DeviceRunRequest}
 */
proto.toit.api.DeviceRunRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.DeviceRunRequest;
  return proto.toit.api.DeviceRunRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.DeviceRunRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.DeviceRunRequest}
 */
proto.toit.api.DeviceRunRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryFilename(value);
      break;
    case 4:
      var value = msg.getSourcesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInstall(value);
      break;
    case 7:
      var value = new proto.toit.api.ProgramSource;
      reader.readMessage(value,proto.toit.api.ProgramSource.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.DeviceRunRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.DeviceRunRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.DeviceRunRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DeviceRunRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntryFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSourcesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getInstall();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.toit.api.ProgramSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes device_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.DeviceRunRequest.prototype.getDeviceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_id = 1;
 * This is a type-conversion wrapper around `getDeviceId()`
 * @return {string}
 */
proto.toit.api.DeviceRunRequest.prototype.getDeviceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeviceId()));
};


/**
 * optional bytes device_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeviceId()`
 * @return {!Uint8Array}
 */
proto.toit.api.DeviceRunRequest.prototype.getDeviceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeviceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string entry_filename = 3;
 * @return {string}
 */
proto.toit.api.DeviceRunRequest.prototype.getEntryFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.setEntryFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, bytes> sources = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.toit.api.DeviceRunRequest.prototype.getSourcesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.clearSourcesMap = function() {
  this.getSourcesMap().clear();
  return this;};


/**
 * repeated string args = 5;
 * @return {!Array<string>}
 */
proto.toit.api.DeviceRunRequest.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional bool install = 6;
 * @return {boolean}
 */
proto.toit.api.DeviceRunRequest.prototype.getInstall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.setInstall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional ProgramSource source = 7;
 * @return {?proto.toit.api.ProgramSource}
 */
proto.toit.api.DeviceRunRequest.prototype.getSource = function() {
  return /** @type{?proto.toit.api.ProgramSource} */ (
    jspb.Message.getWrapperField(this, proto.toit.api.ProgramSource, 7));
};


/**
 * @param {?proto.toit.api.ProgramSource|undefined} value
 * @return {!proto.toit.api.DeviceRunRequest} returns this
*/
proto.toit.api.DeviceRunRequest.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.toit.api.DeviceRunRequest} returns this
 */
proto.toit.api.DeviceRunRequest.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.DeviceRunRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.toit.api.DeviceRunResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.toit.api.DeviceRunResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  OUT: 1,
  ERR: 2,
  EXIT: 3
};

/**
 * @return {proto.toit.api.DeviceRunResponse.ResponseCase}
 */
proto.toit.api.DeviceRunResponse.prototype.getResponseCase = function() {
  return /** @type {proto.toit.api.DeviceRunResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.toit.api.DeviceRunResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.DeviceRunResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.DeviceRunResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.DeviceRunResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DeviceRunResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    out: msg.getOut_asB64(),
    err: msg.getErr_asB64(),
    exit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.DeviceRunResponse}
 */
proto.toit.api.DeviceRunResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.DeviceRunResponse;
  return proto.toit.api.DeviceRunResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.DeviceRunResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.DeviceRunResponse}
 */
proto.toit.api.DeviceRunResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOut(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.DeviceRunResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.DeviceRunResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.DeviceRunResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DeviceRunResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes out = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.DeviceRunResponse.prototype.getOut = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes out = 1;
 * This is a type-conversion wrapper around `getOut()`
 * @return {string}
 */
proto.toit.api.DeviceRunResponse.prototype.getOut_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOut()));
};


/**
 * optional bytes out = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOut()`
 * @return {!Uint8Array}
 */
proto.toit.api.DeviceRunResponse.prototype.getOut_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOut()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.DeviceRunResponse} returns this
 */
proto.toit.api.DeviceRunResponse.prototype.setOut = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.toit.api.DeviceRunResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.DeviceRunResponse} returns this
 */
proto.toit.api.DeviceRunResponse.prototype.clearOut = function() {
  return jspb.Message.setOneofField(this, 1, proto.toit.api.DeviceRunResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.DeviceRunResponse.prototype.hasOut = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes err = 2;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.DeviceRunResponse.prototype.getErr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err = 2;
 * This is a type-conversion wrapper around `getErr()`
 * @return {string}
 */
proto.toit.api.DeviceRunResponse.prototype.getErr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErr()));
};


/**
 * optional bytes err = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErr()`
 * @return {!Uint8Array}
 */
proto.toit.api.DeviceRunResponse.prototype.getErr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.DeviceRunResponse} returns this
 */
proto.toit.api.DeviceRunResponse.prototype.setErr = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.toit.api.DeviceRunResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.DeviceRunResponse} returns this
 */
proto.toit.api.DeviceRunResponse.prototype.clearErr = function() {
  return jspb.Message.setOneofField(this, 2, proto.toit.api.DeviceRunResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.DeviceRunResponse.prototype.hasErr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 exit = 3;
 * @return {number}
 */
proto.toit.api.DeviceRunResponse.prototype.getExit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.toit.api.DeviceRunResponse} returns this
 */
proto.toit.api.DeviceRunResponse.prototype.setExit = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.toit.api.DeviceRunResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.toit.api.DeviceRunResponse} returns this
 */
proto.toit.api.DeviceRunResponse.prototype.clearExit = function() {
  return jspb.Message.setOneofField(this, 3, proto.toit.api.DeviceRunResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.toit.api.DeviceRunResponse.prototype.hasExit = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.DecodeSystemMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.DecodeSystemMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DecodeSystemMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage_asB64(),
    model: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.DecodeSystemMessageRequest}
 */
proto.toit.api.DecodeSystemMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.DecodeSystemMessageRequest;
  return proto.toit.api.DecodeSystemMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.DecodeSystemMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.DecodeSystemMessageRequest}
 */
proto.toit.api.DecodeSystemMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.DecodeSystemMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.DecodeSystemMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DecodeSystemMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes message = 1;
 * @return {!(string|Uint8Array)}
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message = 1;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.toit.api.DecodeSystemMessageRequest} returns this
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.DecodeSystemMessageRequest} returns this
 */
proto.toit.api.DecodeSystemMessageRequest.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.toit.api.DecodeSystemMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.toit.api.DecodeSystemMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.toit.api.DecodeSystemMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DecodeSystemMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.toit.api.DecodeSystemMessageResponse}
 */
proto.toit.api.DecodeSystemMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.toit.api.DecodeSystemMessageResponse;
  return proto.toit.api.DecodeSystemMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.toit.api.DecodeSystemMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.toit.api.DecodeSystemMessageResponse}
 */
proto.toit.api.DecodeSystemMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.toit.api.DecodeSystemMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.toit.api.DecodeSystemMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.toit.api.DecodeSystemMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.toit.api.DecodeSystemMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.toit.api.DecodeSystemMessageResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.toit.api.DecodeSystemMessageResponse} returns this
 */
proto.toit.api.DecodeSystemMessageResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.toit.api);
