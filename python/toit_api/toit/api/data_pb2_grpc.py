# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from toit.api import data_pb2 as toit_dot_api_dot_data__pb2


class DataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSubscription = channel.unary_unary(
                '/toit.api.DataService/CreateSubscription',
                request_serializer=toit_dot_api_dot_data__pb2.CreateSubscriptionRequest.SerializeToString,
                response_deserializer=toit_dot_api_dot_data__pb2.CreateSubscriptionResponse.FromString,
                )
        self.DeleteSubscription = channel.unary_unary(
                '/toit.api.DataService/DeleteSubscription',
                request_serializer=toit_dot_api_dot_data__pb2.DeleteSubscriptionRequest.SerializeToString,
                response_deserializer=toit_dot_api_dot_data__pb2.DeleteSubscriptionResponse.FromString,
                )
        self.ListSubscriptions = channel.unary_unary(
                '/toit.api.DataService/ListSubscriptions',
                request_serializer=toit_dot_api_dot_data__pb2.ListSubscriptionsRequest.SerializeToString,
                response_deserializer=toit_dot_api_dot_data__pb2.ListSubscriptionsResponse.FromString,
                )
        self.Fetch = channel.unary_unary(
                '/toit.api.DataService/Fetch',
                request_serializer=toit_dot_api_dot_data__pb2.FetchRequest.SerializeToString,
                response_deserializer=toit_dot_api_dot_data__pb2.FetchResponse.FromString,
                )
        self.Stream = channel.unary_stream(
                '/toit.api.DataService/Stream',
                request_serializer=toit_dot_api_dot_data__pb2.StreamRequest.SerializeToString,
                response_deserializer=toit_dot_api_dot_data__pb2.StreamResponse.FromString,
                )
        self.Acknowledge = channel.unary_unary(
                '/toit.api.DataService/Acknowledge',
                request_serializer=toit_dot_api_dot_data__pb2.AcknowledgeRequest.SerializeToString,
                response_deserializer=toit_dot_api_dot_data__pb2.AcknowledgeResponse.FromString,
                )


class DataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSubscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSubscriptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Acknowledge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubscription,
                    request_deserializer=toit_dot_api_dot_data__pb2.CreateSubscriptionRequest.FromString,
                    response_serializer=toit_dot_api_dot_data__pb2.CreateSubscriptionResponse.SerializeToString,
            ),
            'DeleteSubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubscription,
                    request_deserializer=toit_dot_api_dot_data__pb2.DeleteSubscriptionRequest.FromString,
                    response_serializer=toit_dot_api_dot_data__pb2.DeleteSubscriptionResponse.SerializeToString,
            ),
            'ListSubscriptions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSubscriptions,
                    request_deserializer=toit_dot_api_dot_data__pb2.ListSubscriptionsRequest.FromString,
                    response_serializer=toit_dot_api_dot_data__pb2.ListSubscriptionsResponse.SerializeToString,
            ),
            'Fetch': grpc.unary_unary_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=toit_dot_api_dot_data__pb2.FetchRequest.FromString,
                    response_serializer=toit_dot_api_dot_data__pb2.FetchResponse.SerializeToString,
            ),
            'Stream': grpc.unary_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=toit_dot_api_dot_data__pb2.StreamRequest.FromString,
                    response_serializer=toit_dot_api_dot_data__pb2.StreamResponse.SerializeToString,
            ),
            'Acknowledge': grpc.unary_unary_rpc_method_handler(
                    servicer.Acknowledge,
                    request_deserializer=toit_dot_api_dot_data__pb2.AcknowledgeRequest.FromString,
                    response_serializer=toit_dot_api_dot_data__pb2.AcknowledgeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'toit.api.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toit.api.DataService/CreateSubscription',
            toit_dot_api_dot_data__pb2.CreateSubscriptionRequest.SerializeToString,
            toit_dot_api_dot_data__pb2.CreateSubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toit.api.DataService/DeleteSubscription',
            toit_dot_api_dot_data__pb2.DeleteSubscriptionRequest.SerializeToString,
            toit_dot_api_dot_data__pb2.DeleteSubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSubscriptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toit.api.DataService/ListSubscriptions',
            toit_dot_api_dot_data__pb2.ListSubscriptionsRequest.SerializeToString,
            toit_dot_api_dot_data__pb2.ListSubscriptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toit.api.DataService/Fetch',
            toit_dot_api_dot_data__pb2.FetchRequest.SerializeToString,
            toit_dot_api_dot_data__pb2.FetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/toit.api.DataService/Stream',
            toit_dot_api_dot_data__pb2.StreamRequest.SerializeToString,
            toit_dot_api_dot_data__pb2.StreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Acknowledge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toit.api.DataService/Acknowledge',
            toit_dot_api_dot_data__pb2.AcknowledgeRequest.SerializeToString,
            toit_dot_api_dot_data__pb2.AcknowledgeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
