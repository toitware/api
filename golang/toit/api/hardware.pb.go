// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.0
// source: toit/api/hardware.proto

package api

import (
	model "github.com/toitware/api/golang/toit/model"
	pubsub "github.com/toitware/api/golang/toit/model/pubsub"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HardwareEvent_Type int32

const (
	HardwareEvent_UNKNOWN HardwareEvent_Type = 0
	HardwareEvent_LOGS    HardwareEvent_Type = 1
	HardwareEvent_METRICS HardwareEvent_Type = 2
	HardwareEvent_PUBSUB  HardwareEvent_Type = 3
)

// Enum value maps for HardwareEvent_Type.
var (
	HardwareEvent_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOGS",
		2: "METRICS",
		3: "PUBSUB",
	}
	HardwareEvent_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"LOGS":    1,
		"METRICS": 2,
		"PUBSUB":  3,
	}
)

func (x HardwareEvent_Type) Enum() *HardwareEvent_Type {
	p := new(HardwareEvent_Type)
	*p = x
	return p
}

func (x HardwareEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwareEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_api_hardware_proto_enumTypes[0].Descriptor()
}

func (HardwareEvent_Type) Type() protoreflect.EnumType {
	return &file_toit_api_hardware_proto_enumTypes[0]
}

func (x HardwareEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwareEvent_Type.Descriptor instead.
func (HardwareEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{6, 0}
}

type ClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId     []byte `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	InitDeviceName string `protobuf:"bytes,2,opt,name=init_device_name,json=initDeviceName,proto3" json:"init_device_name,omitempty"`
	// Optional to set. Default is the current org for the user.
	OrganizationId []byte `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ClaimRequest) Reset() {
	*x = ClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRequest) ProtoMessage() {}

func (x *ClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimRequest.ProtoReflect.Descriptor instead.
func (*ClaimRequest) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{0}
}

func (x *ClaimRequest) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *ClaimRequest) GetInitDeviceName() string {
	if x != nil {
		return x.InitDeviceName
	}
	return ""
}

func (x *ClaimRequest) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

type ClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareInfo   *model.HardwareInfo `protobuf:"bytes,1,opt,name=hardware_info,json=hardwareInfo,proto3" json:"hardware_info,omitempty"`
	DeviceId       []byte              `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceName     string              `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	OrganizationId []byte              `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ClaimResponse) Reset() {
	*x = ClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse) ProtoMessage() {}

func (x *ClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse.ProtoReflect.Descriptor instead.
func (*ClaimResponse) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{1}
}

func (x *ClaimResponse) GetHardwareInfo() *model.HardwareInfo {
	if x != nil {
		return x.HardwareInfo
	}
	return nil
}

func (x *ClaimResponse) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *ClaimResponse) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ClaimResponse) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

type ReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewHardwareId     []byte `protobuf:"bytes,1,opt,name=new_hardware_id,json=newHardwareId,proto3" json:"new_hardware_id,omitempty"`
	CurrentHardwareId []byte `protobuf:"bytes,2,opt,name=current_hardware_id,json=currentHardwareId,proto3" json:"current_hardware_id,omitempty"`
	// The ID of the device to replace.
	DeviceId []byte `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Optional to set. Default is the current org for the user.
	OrganizationId []byte `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ReplaceRequest) Reset() {
	*x = ReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRequest) ProtoMessage() {}

func (x *ReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRequest.ProtoReflect.Descriptor instead.
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{2}
}

func (x *ReplaceRequest) GetNewHardwareId() []byte {
	if x != nil {
		return x.NewHardwareId
	}
	return nil
}

func (x *ReplaceRequest) GetCurrentHardwareId() []byte {
	if x != nil {
		return x.CurrentHardwareId
	}
	return nil
}

func (x *ReplaceRequest) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *ReplaceRequest) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

type ReplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareInfo   *model.HardwareInfo `protobuf:"bytes,1,opt,name=hardware_info,json=hardwareInfo,proto3" json:"hardware_info,omitempty"`
	OrganizationId []byte              `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ReplaceResponse) Reset() {
	*x = ReplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceResponse) ProtoMessage() {}

func (x *ReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceResponse.ProtoReflect.Descriptor instead.
func (*ReplaceResponse) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{3}
}

func (x *ReplaceResponse) GetHardwareInfo() *model.HardwareInfo {
	if x != nil {
		return x.HardwareInfo
	}
	return nil
}

func (x *ReplaceResponse) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

type GetActiveDeviceIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId []byte `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
}

func (x *GetActiveDeviceIDRequest) Reset() {
	*x = GetActiveDeviceIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveDeviceIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDeviceIDRequest) ProtoMessage() {}

func (x *GetActiveDeviceIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDeviceIDRequest.ProtoReflect.Descriptor instead.
func (*GetActiveDeviceIDRequest) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{4}
}

func (x *GetActiveDeviceIDRequest) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

type GetActiveDeviceIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetActiveDeviceIDResponse) Reset() {
	*x = GetActiveDeviceIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveDeviceIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDeviceIDResponse) ProtoMessage() {}

func (x *GetActiveDeviceIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDeviceIDResponse.ProtoReflect.Descriptor instead.
func (*GetActiveDeviceIDResponse) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{5}
}

func (x *GetActiveDeviceIDResponse) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

type HardwareEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId     []byte                 `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	EventId        []byte                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Type           HardwareEvent_Type     `protobuf:"varint,3,opt,name=type,proto3,enum=toit.api.HardwareEvent_Type" json:"type,omitempty"`
	JobId          []byte                 `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Received       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=received,proto3" json:"received,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	DeviceId       []byte                 `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	OrganizationId []byte                 `protobuf:"bytes,8,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Types that are assignable to Data:
	//	*HardwareEvent_Log
	//	*HardwareEvent_Metrics
	//	*HardwareEvent_Pubsub
	Data isHardwareEvent_Data `protobuf_oneof:"data"`
}

func (x *HardwareEvent) Reset() {
	*x = HardwareEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareEvent) ProtoMessage() {}

func (x *HardwareEvent) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareEvent.ProtoReflect.Descriptor instead.
func (*HardwareEvent) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{6}
}

func (x *HardwareEvent) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *HardwareEvent) GetEventId() []byte {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *HardwareEvent) GetType() HardwareEvent_Type {
	if x != nil {
		return x.Type
	}
	return HardwareEvent_UNKNOWN
}

func (x *HardwareEvent) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *HardwareEvent) GetReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *HardwareEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *HardwareEvent) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *HardwareEvent) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (m *HardwareEvent) GetData() isHardwareEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *HardwareEvent) GetLog() *model.LogData {
	if x, ok := x.GetData().(*HardwareEvent_Log); ok {
		return x.Log
	}
	return nil
}

func (x *HardwareEvent) GetMetrics() *model.MetricsData {
	if x, ok := x.GetData().(*HardwareEvent_Metrics); ok {
		return x.Metrics
	}
	return nil
}

func (x *HardwareEvent) GetPubsub() *pubsub.Message {
	if x, ok := x.GetData().(*HardwareEvent_Pubsub); ok {
		return x.Pubsub
	}
	return nil
}

type isHardwareEvent_Data interface {
	isHardwareEvent_Data()
}

type HardwareEvent_Log struct {
	Log *model.LogData `protobuf:"bytes,9,opt,name=log,proto3,oneof"`
}

type HardwareEvent_Metrics struct {
	Metrics *model.MetricsData `protobuf:"bytes,10,opt,name=metrics,proto3,oneof"`
}

type HardwareEvent_Pubsub struct {
	Pubsub *pubsub.Message `protobuf:"bytes,11,opt,name=pubsub,proto3,oneof"`
}

func (*HardwareEvent_Log) isHardwareEvent_Data() {}

func (*HardwareEvent_Metrics) isHardwareEvent_Data() {}

func (*HardwareEvent_Pubsub) isHardwareEvent_Data() {}

type HardwareEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId []byte             `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	JobId      []byte             `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Type       HardwareEvent_Type `protobuf:"varint,3,opt,name=type,proto3,enum=toit.api.HardwareEvent_Type" json:"type,omitempty"`
	Limit      uint64             `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Reverse    bool               `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// Where to stream from, exclusive. Empty returns all historic logs.
	//
	// Types that are assignable to Offset:
	//	*HardwareEventsRequest_Id
	//	*HardwareEventsRequest_Ts
	Offset isHardwareEventsRequest_Offset `protobuf_oneof:"offset"`
}

func (x *HardwareEventsRequest) Reset() {
	*x = HardwareEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareEventsRequest) ProtoMessage() {}

func (x *HardwareEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareEventsRequest.ProtoReflect.Descriptor instead.
func (*HardwareEventsRequest) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{7}
}

func (x *HardwareEventsRequest) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *HardwareEventsRequest) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *HardwareEventsRequest) GetType() HardwareEvent_Type {
	if x != nil {
		return x.Type
	}
	return HardwareEvent_UNKNOWN
}

func (x *HardwareEventsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HardwareEventsRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (m *HardwareEventsRequest) GetOffset() isHardwareEventsRequest_Offset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (x *HardwareEventsRequest) GetId() []byte {
	if x, ok := x.GetOffset().(*HardwareEventsRequest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *HardwareEventsRequest) GetTs() *timestamppb.Timestamp {
	if x, ok := x.GetOffset().(*HardwareEventsRequest_Ts); ok {
		return x.Ts
	}
	return nil
}

type isHardwareEventsRequest_Offset interface {
	isHardwareEventsRequest_Offset()
}

type HardwareEventsRequest_Id struct {
	Id []byte `protobuf:"bytes,6,opt,name=id,proto3,oneof"`
}

type HardwareEventsRequest_Ts struct {
	Ts *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ts,proto3,oneof"`
}

func (*HardwareEventsRequest_Id) isHardwareEventsRequest_Offset() {}

func (*HardwareEventsRequest_Ts) isHardwareEventsRequest_Offset() {}

type HardwareEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *HardwareEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *HardwareEventsResponse) Reset() {
	*x = HardwareEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareEventsResponse) ProtoMessage() {}

func (x *HardwareEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareEventsResponse.ProtoReflect.Descriptor instead.
func (*HardwareEventsResponse) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{8}
}

func (x *HardwareEventsResponse) GetEvent() *HardwareEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type ClaimHardwareIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlashStationSecret string `protobuf:"bytes,1,opt,name=flash_station_secret,json=flashStationSecret,proto3" json:"flash_station_secret,omitempty"`
}

func (x *ClaimHardwareIdentityRequest) Reset() {
	*x = ClaimHardwareIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimHardwareIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimHardwareIdentityRequest) ProtoMessage() {}

func (x *ClaimHardwareIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimHardwareIdentityRequest.ProtoReflect.Descriptor instead.
func (*ClaimHardwareIdentityRequest) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{9}
}

func (x *ClaimHardwareIdentityRequest) GetFlashStationSecret() string {
	if x != nil {
		return x.FlashStationSecret
	}
	return ""
}

type ClaimHardwareIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareIdentity *model.HardwareIdentity `protobuf:"bytes,1,opt,name=hardware_identity,json=hardwareIdentity,proto3" json:"hardware_identity,omitempty"`
}

func (x *ClaimHardwareIdentityResponse) Reset() {
	*x = ClaimHardwareIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimHardwareIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimHardwareIdentityResponse) ProtoMessage() {}

func (x *ClaimHardwareIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimHardwareIdentityResponse.ProtoReflect.Descriptor instead.
func (*ClaimHardwareIdentityResponse) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{10}
}

func (x *ClaimHardwareIdentityResponse) GetHardwareIdentity() *model.HardwareIdentity {
	if x != nil {
		return x.HardwareIdentity
	}
	return nil
}

type SetHardwareIdentityInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlashStationSecret string                      `protobuf:"bytes,1,opt,name=flash_station_secret,json=flashStationSecret,proto3" json:"flash_station_secret,omitempty"`
	HardwareId         []byte                      `protobuf:"bytes,2,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	Info               *model.HardwareIdentityInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SetHardwareIdentityInfoRequest) Reset() {
	*x = SetHardwareIdentityInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHardwareIdentityInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHardwareIdentityInfoRequest) ProtoMessage() {}

func (x *SetHardwareIdentityInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHardwareIdentityInfoRequest.ProtoReflect.Descriptor instead.
func (*SetHardwareIdentityInfoRequest) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{11}
}

func (x *SetHardwareIdentityInfoRequest) GetFlashStationSecret() string {
	if x != nil {
		return x.FlashStationSecret
	}
	return ""
}

func (x *SetHardwareIdentityInfoRequest) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *SetHardwareIdentityInfoRequest) GetInfo() *model.HardwareIdentityInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetHardwareIdentityInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetHardwareIdentityInfoResponse) Reset() {
	*x = SetHardwareIdentityInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_api_hardware_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHardwareIdentityInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHardwareIdentityInfoResponse) ProtoMessage() {}

func (x *SetHardwareIdentityInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_toit_api_hardware_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHardwareIdentityInfoResponse.ProtoReflect.Descriptor instead.
func (*SetHardwareIdentityInfoResponse) Descriptor() ([]byte, []int) {
	return file_toit_api_hardware_proto_rawDescGZIP(), []int{12}
}

var File_toit_api_hardware_proto protoreflect.FileDescriptor

var file_toit_api_hardware_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x6f, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x6f, 0x69, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x1a, 0x17, 0x74, 0x6f, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x6f,
	0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x74, 0x6f, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9c, 0x04, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x69,
	0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x22, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x47,
	0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x03, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x02, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x1c, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x6a, 0x0a,
	0x1d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x69, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x1e, 0x53, 0x65,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc8, 0x02, 0x0a, 0x0f, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x16, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x74,
	0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x32, 0xec, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x2e,
	0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x61, 0x0a, 0x16, 0x69, 0x6f, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0d, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f, 0x69, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x74, 0x6f, 0x69, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0e, 0x54, 0x6f, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_toit_api_hardware_proto_rawDescOnce sync.Once
	file_toit_api_hardware_proto_rawDescData = file_toit_api_hardware_proto_rawDesc
)

func file_toit_api_hardware_proto_rawDescGZIP() []byte {
	file_toit_api_hardware_proto_rawDescOnce.Do(func() {
		file_toit_api_hardware_proto_rawDescData = protoimpl.X.CompressGZIP(file_toit_api_hardware_proto_rawDescData)
	})
	return file_toit_api_hardware_proto_rawDescData
}

var file_toit_api_hardware_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_toit_api_hardware_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_toit_api_hardware_proto_goTypes = []interface{}{
	(HardwareEvent_Type)(0),                 // 0: toit.api.HardwareEvent.Type
	(*ClaimRequest)(nil),                    // 1: toit.api.ClaimRequest
	(*ClaimResponse)(nil),                   // 2: toit.api.ClaimResponse
	(*ReplaceRequest)(nil),                  // 3: toit.api.ReplaceRequest
	(*ReplaceResponse)(nil),                 // 4: toit.api.ReplaceResponse
	(*GetActiveDeviceIDRequest)(nil),        // 5: toit.api.GetActiveDeviceIDRequest
	(*GetActiveDeviceIDResponse)(nil),       // 6: toit.api.GetActiveDeviceIDResponse
	(*HardwareEvent)(nil),                   // 7: toit.api.HardwareEvent
	(*HardwareEventsRequest)(nil),           // 8: toit.api.HardwareEventsRequest
	(*HardwareEventsResponse)(nil),          // 9: toit.api.HardwareEventsResponse
	(*ClaimHardwareIdentityRequest)(nil),    // 10: toit.api.ClaimHardwareIdentityRequest
	(*ClaimHardwareIdentityResponse)(nil),   // 11: toit.api.ClaimHardwareIdentityResponse
	(*SetHardwareIdentityInfoRequest)(nil),  // 12: toit.api.SetHardwareIdentityInfoRequest
	(*SetHardwareIdentityInfoResponse)(nil), // 13: toit.api.SetHardwareIdentityInfoResponse
	(*model.HardwareInfo)(nil),              // 14: toit.model.HardwareInfo
	(*timestamppb.Timestamp)(nil),           // 15: google.protobuf.Timestamp
	(*model.LogData)(nil),                   // 16: toit.model.LogData
	(*model.MetricsData)(nil),               // 17: toit.model.MetricsData
	(*pubsub.Message)(nil),                  // 18: toit.model.pubsub.Message
	(*model.HardwareIdentity)(nil),          // 19: toit.model.HardwareIdentity
	(*model.HardwareIdentityInfo)(nil),      // 20: toit.model.HardwareIdentityInfo
}
var file_toit_api_hardware_proto_depIdxs = []int32{
	14, // 0: toit.api.ClaimResponse.hardware_info:type_name -> toit.model.HardwareInfo
	14, // 1: toit.api.ReplaceResponse.hardware_info:type_name -> toit.model.HardwareInfo
	0,  // 2: toit.api.HardwareEvent.type:type_name -> toit.api.HardwareEvent.Type
	15, // 3: toit.api.HardwareEvent.received:type_name -> google.protobuf.Timestamp
	15, // 4: toit.api.HardwareEvent.created:type_name -> google.protobuf.Timestamp
	16, // 5: toit.api.HardwareEvent.log:type_name -> toit.model.LogData
	17, // 6: toit.api.HardwareEvent.metrics:type_name -> toit.model.MetricsData
	18, // 7: toit.api.HardwareEvent.pubsub:type_name -> toit.model.pubsub.Message
	0,  // 8: toit.api.HardwareEventsRequest.type:type_name -> toit.api.HardwareEvent.Type
	15, // 9: toit.api.HardwareEventsRequest.ts:type_name -> google.protobuf.Timestamp
	7,  // 10: toit.api.HardwareEventsResponse.event:type_name -> toit.api.HardwareEvent
	19, // 11: toit.api.ClaimHardwareIdentityResponse.hardware_identity:type_name -> toit.model.HardwareIdentity
	20, // 12: toit.api.SetHardwareIdentityInfoRequest.info:type_name -> toit.model.HardwareIdentityInfo
	1,  // 13: toit.api.HardwareService.Claim:input_type -> toit.api.ClaimRequest
	3,  // 14: toit.api.HardwareService.Replace:input_type -> toit.api.ReplaceRequest
	5,  // 15: toit.api.HardwareService.GetActiveDeviceID:input_type -> toit.api.GetActiveDeviceIDRequest
	8,  // 16: toit.api.HardwareService.HardwareEvents:input_type -> toit.api.HardwareEventsRequest
	10, // 17: toit.api.FlashStation.ClaimHardwareIdentity:input_type -> toit.api.ClaimHardwareIdentityRequest
	12, // 18: toit.api.FlashStation.SetHardwareIdentityInfo:input_type -> toit.api.SetHardwareIdentityInfoRequest
	2,  // 19: toit.api.HardwareService.Claim:output_type -> toit.api.ClaimResponse
	4,  // 20: toit.api.HardwareService.Replace:output_type -> toit.api.ReplaceResponse
	6,  // 21: toit.api.HardwareService.GetActiveDeviceID:output_type -> toit.api.GetActiveDeviceIDResponse
	9,  // 22: toit.api.HardwareService.HardwareEvents:output_type -> toit.api.HardwareEventsResponse
	11, // 23: toit.api.FlashStation.ClaimHardwareIdentity:output_type -> toit.api.ClaimHardwareIdentityResponse
	13, // 24: toit.api.FlashStation.SetHardwareIdentityInfo:output_type -> toit.api.SetHardwareIdentityInfoResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_toit_api_hardware_proto_init() }
func file_toit_api_hardware_proto_init() {
	if File_toit_api_hardware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_toit_api_hardware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveDeviceIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveDeviceIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimHardwareIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimHardwareIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHardwareIdentityInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_api_hardware_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHardwareIdentityInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_toit_api_hardware_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*HardwareEvent_Log)(nil),
		(*HardwareEvent_Metrics)(nil),
		(*HardwareEvent_Pubsub)(nil),
	}
	file_toit_api_hardware_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HardwareEventsRequest_Id)(nil),
		(*HardwareEventsRequest_Ts)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_toit_api_hardware_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_toit_api_hardware_proto_goTypes,
		DependencyIndexes: file_toit_api_hardware_proto_depIdxs,
		EnumInfos:         file_toit_api_hardware_proto_enumTypes,
		MessageInfos:      file_toit_api_hardware_proto_msgTypes,
	}.Build()
	File_toit_api_hardware_proto = out.File
	file_toit_api_hardware_proto_rawDesc = nil
	file_toit_api_hardware_proto_goTypes = nil
	file_toit_api_hardware_proto_depIdxs = nil
}
