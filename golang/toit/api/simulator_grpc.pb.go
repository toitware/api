// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: toit/api/simulator.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulatorServiceClient is the client API for SimulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulatorServiceClient interface {
	CreateSimulator(ctx context.Context, in *CreateSimulatorRequest, opts ...grpc.CallOption) (*CreateSimulatorResponse, error)
	RemoveSimulator(ctx context.Context, in *RemoveSimulatorRequest, opts ...grpc.CallOption) (*RemoveSimulatorResponse, error)
	ListSimulators(ctx context.Context, in *ListSimulatorsRequest, opts ...grpc.CallOption) (*ListSimulatorsResponse, error)
	CreateHardwareIdentity(ctx context.Context, in *CreateHardwareIdentityRequest, opts ...grpc.CallOption) (*CreateHardwareIdentityResponse, error)
}

type simulatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulatorServiceClient(cc grpc.ClientConnInterface) SimulatorServiceClient {
	return &simulatorServiceClient{cc}
}

func (c *simulatorServiceClient) CreateSimulator(ctx context.Context, in *CreateSimulatorRequest, opts ...grpc.CallOption) (*CreateSimulatorResponse, error) {
	out := new(CreateSimulatorResponse)
	err := c.cc.Invoke(ctx, "/toit.api.SimulatorService/CreateSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) RemoveSimulator(ctx context.Context, in *RemoveSimulatorRequest, opts ...grpc.CallOption) (*RemoveSimulatorResponse, error) {
	out := new(RemoveSimulatorResponse)
	err := c.cc.Invoke(ctx, "/toit.api.SimulatorService/RemoveSimulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) ListSimulators(ctx context.Context, in *ListSimulatorsRequest, opts ...grpc.CallOption) (*ListSimulatorsResponse, error) {
	out := new(ListSimulatorsResponse)
	err := c.cc.Invoke(ctx, "/toit.api.SimulatorService/ListSimulators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) CreateHardwareIdentity(ctx context.Context, in *CreateHardwareIdentityRequest, opts ...grpc.CallOption) (*CreateHardwareIdentityResponse, error) {
	out := new(CreateHardwareIdentityResponse)
	err := c.cc.Invoke(ctx, "/toit.api.SimulatorService/CreateHardwareIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServiceServer is the server API for SimulatorService service.
// All implementations must embed UnimplementedSimulatorServiceServer
// for forward compatibility
type SimulatorServiceServer interface {
	CreateSimulator(context.Context, *CreateSimulatorRequest) (*CreateSimulatorResponse, error)
	RemoveSimulator(context.Context, *RemoveSimulatorRequest) (*RemoveSimulatorResponse, error)
	ListSimulators(context.Context, *ListSimulatorsRequest) (*ListSimulatorsResponse, error)
	CreateHardwareIdentity(context.Context, *CreateHardwareIdentityRequest) (*CreateHardwareIdentityResponse, error)
	mustEmbedUnimplementedSimulatorServiceServer()
}

// UnimplementedSimulatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimulatorServiceServer struct {
}

func (UnimplementedSimulatorServiceServer) CreateSimulator(context.Context, *CreateSimulatorRequest) (*CreateSimulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSimulator not implemented")
}
func (UnimplementedSimulatorServiceServer) RemoveSimulator(context.Context, *RemoveSimulatorRequest) (*RemoveSimulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSimulator not implemented")
}
func (UnimplementedSimulatorServiceServer) ListSimulators(context.Context, *ListSimulatorsRequest) (*ListSimulatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSimulators not implemented")
}
func (UnimplementedSimulatorServiceServer) CreateHardwareIdentity(context.Context, *CreateHardwareIdentityRequest) (*CreateHardwareIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHardwareIdentity not implemented")
}
func (UnimplementedSimulatorServiceServer) mustEmbedUnimplementedSimulatorServiceServer() {}

// UnsafeSimulatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulatorServiceServer will
// result in compilation errors.
type UnsafeSimulatorServiceServer interface {
	mustEmbedUnimplementedSimulatorServiceServer()
}

func RegisterSimulatorServiceServer(s grpc.ServiceRegistrar, srv SimulatorServiceServer) {
	s.RegisterService(&SimulatorService_ServiceDesc, srv)
}

func _SimulatorService_CreateSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSimulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).CreateSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.SimulatorService/CreateSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).CreateSimulator(ctx, req.(*CreateSimulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_RemoveSimulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSimulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).RemoveSimulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.SimulatorService/RemoveSimulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).RemoveSimulator(ctx, req.(*RemoveSimulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_ListSimulators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSimulatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).ListSimulators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.SimulatorService/ListSimulators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).ListSimulators(ctx, req.(*ListSimulatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_CreateHardwareIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHardwareIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).CreateHardwareIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.SimulatorService/CreateHardwareIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).CreateHardwareIdentity(ctx, req.(*CreateHardwareIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimulatorService_ServiceDesc is the grpc.ServiceDesc for SimulatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toit.api.SimulatorService",
	HandlerType: (*SimulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSimulator",
			Handler:    _SimulatorService_CreateSimulator_Handler,
		},
		{
			MethodName: "RemoveSimulator",
			Handler:    _SimulatorService_RemoveSimulator_Handler,
		},
		{
			MethodName: "ListSimulators",
			Handler:    _SimulatorService_ListSimulators_Handler,
		},
		{
			MethodName: "CreateHardwareIdentity",
			Handler:    _SimulatorService_CreateHardwareIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toit/api/simulator.proto",
}
