// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: toit/api/hardware.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HardwareServiceClient is the client API for HardwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareServiceClient interface {
	Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
	GetActiveDeviceID(ctx context.Context, in *GetActiveDeviceIDRequest, opts ...grpc.CallOption) (*GetActiveDeviceIDResponse, error)
	// Debug endpoints only available on local console
	HardwareEvents(ctx context.Context, in *HardwareEventsRequest, opts ...grpc.CallOption) (HardwareService_HardwareEventsClient, error)
}

type hardwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareServiceClient(cc grpc.ClientConnInterface) HardwareServiceClient {
	return &hardwareServiceClient{cc}
}

func (c *hardwareServiceClient) Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, "/toit.api.HardwareService/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := c.cc.Invoke(ctx, "/toit.api.HardwareService/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) GetActiveDeviceID(ctx context.Context, in *GetActiveDeviceIDRequest, opts ...grpc.CallOption) (*GetActiveDeviceIDResponse, error) {
	out := new(GetActiveDeviceIDResponse)
	err := c.cc.Invoke(ctx, "/toit.api.HardwareService/GetActiveDeviceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) HardwareEvents(ctx context.Context, in *HardwareEventsRequest, opts ...grpc.CallOption) (HardwareService_HardwareEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HardwareService_ServiceDesc.Streams[0], "/toit.api.HardwareService/HardwareEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &hardwareServiceHardwareEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HardwareService_HardwareEventsClient interface {
	Recv() (*HardwareEventsResponse, error)
	grpc.ClientStream
}

type hardwareServiceHardwareEventsClient struct {
	grpc.ClientStream
}

func (x *hardwareServiceHardwareEventsClient) Recv() (*HardwareEventsResponse, error) {
	m := new(HardwareEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HardwareServiceServer is the server API for HardwareService service.
// All implementations must embed UnimplementedHardwareServiceServer
// for forward compatibility
type HardwareServiceServer interface {
	Claim(context.Context, *ClaimRequest) (*ClaimResponse, error)
	Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
	GetActiveDeviceID(context.Context, *GetActiveDeviceIDRequest) (*GetActiveDeviceIDResponse, error)
	// Debug endpoints only available on local console
	HardwareEvents(*HardwareEventsRequest, HardwareService_HardwareEventsServer) error
	mustEmbedUnimplementedHardwareServiceServer()
}

// UnimplementedHardwareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHardwareServiceServer struct {
}

func (UnimplementedHardwareServiceServer) Claim(context.Context, *ClaimRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (UnimplementedHardwareServiceServer) Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedHardwareServiceServer) GetActiveDeviceID(context.Context, *GetActiveDeviceIDRequest) (*GetActiveDeviceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDeviceID not implemented")
}
func (UnimplementedHardwareServiceServer) HardwareEvents(*HardwareEventsRequest, HardwareService_HardwareEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method HardwareEvents not implemented")
}
func (UnimplementedHardwareServiceServer) mustEmbedUnimplementedHardwareServiceServer() {}

// UnsafeHardwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareServiceServer will
// result in compilation errors.
type UnsafeHardwareServiceServer interface {
	mustEmbedUnimplementedHardwareServiceServer()
}

func RegisterHardwareServiceServer(s grpc.ServiceRegistrar, srv HardwareServiceServer) {
	s.RegisterService(&HardwareService_ServiceDesc, srv)
}

func _HardwareService_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.HardwareService/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).Claim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.HardwareService/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_GetActiveDeviceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveDeviceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).GetActiveDeviceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.HardwareService/GetActiveDeviceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).GetActiveDeviceID(ctx, req.(*GetActiveDeviceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_HardwareEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HardwareEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HardwareServiceServer).HardwareEvents(m, &hardwareServiceHardwareEventsServer{stream})
}

type HardwareService_HardwareEventsServer interface {
	Send(*HardwareEventsResponse) error
	grpc.ServerStream
}

type hardwareServiceHardwareEventsServer struct {
	grpc.ServerStream
}

func (x *hardwareServiceHardwareEventsServer) Send(m *HardwareEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HardwareService_ServiceDesc is the grpc.ServiceDesc for HardwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toit.api.HardwareService",
	HandlerType: (*HardwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _HardwareService_Claim_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _HardwareService_Replace_Handler,
		},
		{
			MethodName: "GetActiveDeviceID",
			Handler:    _HardwareService_GetActiveDeviceID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HardwareEvents",
			Handler:       _HardwareService_HardwareEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "toit/api/hardware.proto",
}

// FlashStationClient is the client API for FlashStation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashStationClient interface {
	ClaimHardwareIdentity(ctx context.Context, in *ClaimHardwareIdentityRequest, opts ...grpc.CallOption) (*ClaimHardwareIdentityResponse, error)
	SetHardwareIdentityInfo(ctx context.Context, in *SetHardwareIdentityInfoRequest, opts ...grpc.CallOption) (*SetHardwareIdentityInfoResponse, error)
}

type flashStationClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashStationClient(cc grpc.ClientConnInterface) FlashStationClient {
	return &flashStationClient{cc}
}

func (c *flashStationClient) ClaimHardwareIdentity(ctx context.Context, in *ClaimHardwareIdentityRequest, opts ...grpc.CallOption) (*ClaimHardwareIdentityResponse, error) {
	out := new(ClaimHardwareIdentityResponse)
	err := c.cc.Invoke(ctx, "/toit.api.FlashStation/ClaimHardwareIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashStationClient) SetHardwareIdentityInfo(ctx context.Context, in *SetHardwareIdentityInfoRequest, opts ...grpc.CallOption) (*SetHardwareIdentityInfoResponse, error) {
	out := new(SetHardwareIdentityInfoResponse)
	err := c.cc.Invoke(ctx, "/toit.api.FlashStation/SetHardwareIdentityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashStationServer is the server API for FlashStation service.
// All implementations must embed UnimplementedFlashStationServer
// for forward compatibility
type FlashStationServer interface {
	ClaimHardwareIdentity(context.Context, *ClaimHardwareIdentityRequest) (*ClaimHardwareIdentityResponse, error)
	SetHardwareIdentityInfo(context.Context, *SetHardwareIdentityInfoRequest) (*SetHardwareIdentityInfoResponse, error)
	mustEmbedUnimplementedFlashStationServer()
}

// UnimplementedFlashStationServer must be embedded to have forward compatible implementations.
type UnimplementedFlashStationServer struct {
}

func (UnimplementedFlashStationServer) ClaimHardwareIdentity(context.Context, *ClaimHardwareIdentityRequest) (*ClaimHardwareIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimHardwareIdentity not implemented")
}
func (UnimplementedFlashStationServer) SetHardwareIdentityInfo(context.Context, *SetHardwareIdentityInfoRequest) (*SetHardwareIdentityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHardwareIdentityInfo not implemented")
}
func (UnimplementedFlashStationServer) mustEmbedUnimplementedFlashStationServer() {}

// UnsafeFlashStationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashStationServer will
// result in compilation errors.
type UnsafeFlashStationServer interface {
	mustEmbedUnimplementedFlashStationServer()
}

func RegisterFlashStationServer(s grpc.ServiceRegistrar, srv FlashStationServer) {
	s.RegisterService(&FlashStation_ServiceDesc, srv)
}

func _FlashStation_ClaimHardwareIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimHardwareIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashStationServer).ClaimHardwareIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.FlashStation/ClaimHardwareIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashStationServer).ClaimHardwareIdentity(ctx, req.(*ClaimHardwareIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashStation_SetHardwareIdentityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHardwareIdentityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashStationServer).SetHardwareIdentityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toit.api.FlashStation/SetHardwareIdentityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashStationServer).SetHardwareIdentityInfo(ctx, req.(*SetHardwareIdentityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashStation_ServiceDesc is the grpc.ServiceDesc for FlashStation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashStation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toit.api.FlashStation",
	HandlerType: (*FlashStationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimHardwareIdentity",
			Handler:    _FlashStation_ClaimHardwareIdentity_Handler,
		},
		{
			MethodName: "SetHardwareIdentityInfo",
			Handler:    _FlashStation_SetHardwareIdentityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toit/api/hardware.proto",
}
