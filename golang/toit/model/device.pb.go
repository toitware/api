// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: toit/model/device.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceConnectionType int32

const (
	DeviceConnectionType_DEVICE_CONNECTION_TYPE_UNKNOWN DeviceConnectionType = 0
	DeviceConnectionType_DEVICE_CONNECTION_TYPE_WIFI    DeviceConnectionType = 1
	DeviceConnectionType_DEVICE_CONNECTION_TYPE_NBIOT   DeviceConnectionType = 2
	DeviceConnectionType_DEVICE_CONNECTION_TYPE_OS      DeviceConnectionType = 3
)

// Enum value maps for DeviceConnectionType.
var (
	DeviceConnectionType_name = map[int32]string{
		0: "DEVICE_CONNECTION_TYPE_UNKNOWN",
		1: "DEVICE_CONNECTION_TYPE_WIFI",
		2: "DEVICE_CONNECTION_TYPE_NBIOT",
		3: "DEVICE_CONNECTION_TYPE_OS",
	}
	DeviceConnectionType_value = map[string]int32{
		"DEVICE_CONNECTION_TYPE_UNKNOWN": 0,
		"DEVICE_CONNECTION_TYPE_WIFI":    1,
		"DEVICE_CONNECTION_TYPE_NBIOT":   2,
		"DEVICE_CONNECTION_TYPE_OS":      3,
	}
)

func (x DeviceConnectionType) Enum() *DeviceConnectionType {
	p := new(DeviceConnectionType)
	*p = x
	return p
}

func (x DeviceConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[0].Descriptor()
}

func (DeviceConnectionType) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[0]
}

func (x DeviceConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceConnectionType.Descriptor instead.
func (DeviceConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{0}
}

type DeviceChangeType int32

const (
	DeviceChangeType_DEVICE_CHANGE_UNKNOWN DeviceChangeType = 0
	DeviceChangeType_DEVICE_CHANGE_ADDED   DeviceChangeType = 1
	DeviceChangeType_DEVICE_CHANGE_DELETED DeviceChangeType = 2
	DeviceChangeType_DEVICE_CHANGE_CHANGED DeviceChangeType = 3
	// Deprecated: Do not use.
	DeviceChangeType_DEVICE_CHANGE_HEARTBEAT    DeviceChangeType = 4
	DeviceChangeType_DEVICE_CHANGE_CONNECTED    DeviceChangeType = 5
	DeviceChangeType_DEVICE_CHANGE_DISCONNECTED DeviceChangeType = 6
)

// Enum value maps for DeviceChangeType.
var (
	DeviceChangeType_name = map[int32]string{
		0: "DEVICE_CHANGE_UNKNOWN",
		1: "DEVICE_CHANGE_ADDED",
		2: "DEVICE_CHANGE_DELETED",
		3: "DEVICE_CHANGE_CHANGED",
		4: "DEVICE_CHANGE_HEARTBEAT",
		5: "DEVICE_CHANGE_CONNECTED",
		6: "DEVICE_CHANGE_DISCONNECTED",
	}
	DeviceChangeType_value = map[string]int32{
		"DEVICE_CHANGE_UNKNOWN":      0,
		"DEVICE_CHANGE_ADDED":        1,
		"DEVICE_CHANGE_DELETED":      2,
		"DEVICE_CHANGE_CHANGED":      3,
		"DEVICE_CHANGE_HEARTBEAT":    4,
		"DEVICE_CHANGE_CONNECTED":    5,
		"DEVICE_CHANGE_DISCONNECTED": 6,
	}
)

func (x DeviceChangeType) Enum() *DeviceChangeType {
	p := new(DeviceChangeType)
	*p = x
	return p
}

func (x DeviceChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[1].Descriptor()
}

func (DeviceChangeType) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[1]
}

func (x DeviceChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceChangeType.Descriptor instead.
func (DeviceChangeType) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{1}
}

type DeviceSessionChangeType int32

const (
	DeviceSessionChangeType_UNKNOWN_TYPE DeviceSessionChangeType = 0
	DeviceSessionChangeType_CONNECTED    DeviceSessionChangeType = 1
	DeviceSessionChangeType_DISCONNECTED DeviceSessionChangeType = 2
)

// Enum value maps for DeviceSessionChangeType.
var (
	DeviceSessionChangeType_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "CONNECTED",
		2: "DISCONNECTED",
	}
	DeviceSessionChangeType_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"CONNECTED":    1,
		"DISCONNECTED": 2,
	}
)

func (x DeviceSessionChangeType) Enum() *DeviceSessionChangeType {
	p := new(DeviceSessionChangeType)
	*p = x
	return p
}

func (x DeviceSessionChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceSessionChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[2].Descriptor()
}

func (DeviceSessionChangeType) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[2]
}

func (x DeviceSessionChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceSessionChangeType.Descriptor instead.
func (DeviceSessionChangeType) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{2}
}

type DeviceAction int32

const (
	DeviceAction_DEVICE_ACTION_UNKNOWN                 DeviceAction = 0
	DeviceAction_DEVICE_ACTION_NOP                     DeviceAction = 1
	DeviceAction_DEVICE_ACTION_REBOOT                  DeviceAction = 2
	DeviceAction_DEVICE_ACTION_NEW_EPOCH               DeviceAction = 3
	DeviceAction_DEVICE_ACTION_REPORT_CONFIG           DeviceAction = 4
	DeviceAction_DEVICE_ACTION_FACTORY_PROMOTE         DeviceAction = 5
	DeviceAction_DEVICE_ACTION_UPDATE_CONFIG           DeviceAction = 6
	DeviceAction_DEVICE_ACTION_UPDATE_FIRMWARE         DeviceAction = 7
	DeviceAction_DEVICE_ACTION_FACTORY_RESET           DeviceAction = 8
	DeviceAction_DEVICE_ACTION_RECONCILE               DeviceAction = 9
	DeviceAction_DEVICE_ACTION_UPDATE_PARTIAL_FIRMWARE DeviceAction = 10
	DeviceAction_DEVICE_ACTION_REPORT_MODULES          DeviceAction = 11
	DeviceAction_DEVICE_ACTION_UPDATE_MODULE_CELLULAR  DeviceAction = 12
)

// Enum value maps for DeviceAction.
var (
	DeviceAction_name = map[int32]string{
		0:  "DEVICE_ACTION_UNKNOWN",
		1:  "DEVICE_ACTION_NOP",
		2:  "DEVICE_ACTION_REBOOT",
		3:  "DEVICE_ACTION_NEW_EPOCH",
		4:  "DEVICE_ACTION_REPORT_CONFIG",
		5:  "DEVICE_ACTION_FACTORY_PROMOTE",
		6:  "DEVICE_ACTION_UPDATE_CONFIG",
		7:  "DEVICE_ACTION_UPDATE_FIRMWARE",
		8:  "DEVICE_ACTION_FACTORY_RESET",
		9:  "DEVICE_ACTION_RECONCILE",
		10: "DEVICE_ACTION_UPDATE_PARTIAL_FIRMWARE",
		11: "DEVICE_ACTION_REPORT_MODULES",
		12: "DEVICE_ACTION_UPDATE_MODULE_CELLULAR",
	}
	DeviceAction_value = map[string]int32{
		"DEVICE_ACTION_UNKNOWN":                 0,
		"DEVICE_ACTION_NOP":                     1,
		"DEVICE_ACTION_REBOOT":                  2,
		"DEVICE_ACTION_NEW_EPOCH":               3,
		"DEVICE_ACTION_REPORT_CONFIG":           4,
		"DEVICE_ACTION_FACTORY_PROMOTE":         5,
		"DEVICE_ACTION_UPDATE_CONFIG":           6,
		"DEVICE_ACTION_UPDATE_FIRMWARE":         7,
		"DEVICE_ACTION_FACTORY_RESET":           8,
		"DEVICE_ACTION_RECONCILE":               9,
		"DEVICE_ACTION_UPDATE_PARTIAL_FIRMWARE": 10,
		"DEVICE_ACTION_REPORT_MODULES":          11,
		"DEVICE_ACTION_UPDATE_MODULE_CELLULAR":  12,
	}
)

func (x DeviceAction) Enum() *DeviceAction {
	p := new(DeviceAction)
	*p = x
	return p
}

func (x DeviceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[3].Descriptor()
}

func (DeviceAction) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[3]
}

func (x DeviceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceAction.Descriptor instead.
func (DeviceAction) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{3}
}

type DeviceModuleType int32

const (
	DeviceModuleType_Unknown  DeviceModuleType = 0
	DeviceModuleType_Cellular DeviceModuleType = 1
)

// Enum value maps for DeviceModuleType.
var (
	DeviceModuleType_name = map[int32]string{
		0: "Unknown",
		1: "Cellular",
	}
	DeviceModuleType_value = map[string]int32{
		"Unknown":  0,
		"Cellular": 1,
	}
)

func (x DeviceModuleType) Enum() *DeviceModuleType {
	p := new(DeviceModuleType)
	*p = x
	return p
}

func (x DeviceModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[4].Descriptor()
}

func (DeviceModuleType) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[4]
}

func (x DeviceModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceModuleType.Descriptor instead.
func (DeviceModuleType) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{4}
}

type DeviceEvent_Type int32

const (
	DeviceEvent_UNKNOWN        DeviceEvent_Type = 0
	DeviceEvent_CONFIG_CHANGE  DeviceEvent_Type = 1
	DeviceEvent_STATUS_CHANGE  DeviceEvent_Type = 2
	DeviceEvent_NEXT_ACTION    DeviceEvent_Type = 3
	DeviceEvent_DEVICE_ACTION  DeviceEvent_Type = 4
	DeviceEvent_QUEUE_OVERFLOW DeviceEvent_Type = 5
	DeviceEvent_REQUEST_FILE   DeviceEvent_Type = 6
)

// Enum value maps for DeviceEvent_Type.
var (
	DeviceEvent_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONFIG_CHANGE",
		2: "STATUS_CHANGE",
		3: "NEXT_ACTION",
		4: "DEVICE_ACTION",
		5: "QUEUE_OVERFLOW",
		6: "REQUEST_FILE",
	}
	DeviceEvent_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"CONFIG_CHANGE":  1,
		"STATUS_CHANGE":  2,
		"NEXT_ACTION":    3,
		"DEVICE_ACTION":  4,
		"QUEUE_OVERFLOW": 5,
		"REQUEST_FILE":   6,
	}
)

func (x DeviceEvent_Type) Enum() *DeviceEvent_Type {
	p := new(DeviceEvent_Type)
	*p = x
	return p
}

func (x DeviceEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[5].Descriptor()
}

func (DeviceEvent_Type) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[5]
}

func (x DeviceEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceEvent_Type.Descriptor instead.
func (DeviceEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 0}
}

type DeviceEvent_Info_Value_Primitive_Type int32

const (
	DeviceEvent_Info_Value_Primitive_INVALID DeviceEvent_Info_Value_Primitive_Type = 0
	DeviceEvent_Info_Value_Primitive_JSON    DeviceEvent_Info_Value_Primitive_Type = 1
	DeviceEvent_Info_Value_Primitive_STRING  DeviceEvent_Info_Value_Primitive_Type = 2
)

// Enum value maps for DeviceEvent_Info_Value_Primitive_Type.
var (
	DeviceEvent_Info_Value_Primitive_Type_name = map[int32]string{
		0: "INVALID",
		1: "JSON",
		2: "STRING",
	}
	DeviceEvent_Info_Value_Primitive_Type_value = map[string]int32{
		"INVALID": 0,
		"JSON":    1,
		"STRING":  2,
	}
)

func (x DeviceEvent_Info_Value_Primitive_Type) Enum() *DeviceEvent_Info_Value_Primitive_Type {
	p := new(DeviceEvent_Info_Value_Primitive_Type)
	*p = x
	return p
}

func (x DeviceEvent_Info_Value_Primitive_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceEvent_Info_Value_Primitive_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_toit_model_device_proto_enumTypes[6].Descriptor()
}

func (DeviceEvent_Info_Value_Primitive_Type) Type() protoreflect.EnumType {
	return &file_toit_model_device_proto_enumTypes[6]
}

func (x DeviceEvent_Info_Value_Primitive_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceEvent_Info_Value_Primitive_Type.Descriptor instead.
func (DeviceEvent_Info_Value_Primitive_Type) EnumDescriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 1, 0, 0, 0}
}

type DeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartedAfter  *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=started_after,json=startedAfter,proto3" json:"started_after,omitempty"`
	Sdk           string                    `protobuf:"bytes,3,opt,name=sdk,proto3" json:"sdk,omitempty"`
	Broker        *DeviceBrokerSettings     `protobuf:"bytes,4,opt,name=broker,proto3" json:"broker,omitempty"`
	Connection    *DeviceConnectionSettings `protobuf:"bytes,5,opt,name=connection,proto3" json:"connection,omitempty"`
	Model         string                    `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	FactoryAfter  *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=factory_after,json=factoryAfter,proto3" json:"factory_after,omitempty"`
	Runtime       *DeviceRuntimeSettings    `protobuf:"bytes,8,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Modules       *DeviceModulesConfig      `protobuf:"bytes,9,opt,name=modules,proto3" json:"modules,omitempty"`
	ModelSettings *DeviceModelSettings      `protobuf:"bytes,10,opt,name=model_settings,json=modelSettings,proto3" json:"model_settings,omitempty"`
}

func (x *DeviceConfig) Reset() {
	*x = DeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfig) ProtoMessage() {}

func (x *DeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfig.ProtoReflect.Descriptor instead.
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceConfig) GetStartedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAfter
	}
	return nil
}

func (x *DeviceConfig) GetSdk() string {
	if x != nil {
		return x.Sdk
	}
	return ""
}

func (x *DeviceConfig) GetBroker() *DeviceBrokerSettings {
	if x != nil {
		return x.Broker
	}
	return nil
}

func (x *DeviceConfig) GetConnection() *DeviceConnectionSettings {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *DeviceConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceConfig) GetFactoryAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.FactoryAfter
	}
	return nil
}

func (x *DeviceConfig) GetRuntime() *DeviceRuntimeSettings {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *DeviceConfig) GetModules() *DeviceModulesConfig {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *DeviceConfig) GetModelSettings() *DeviceModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

type DeviceModulesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncRequested *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=sync_requested,json=syncRequested,proto3" json:"sync_requested,omitempty"`
	Modules       *DeviceModules         `protobuf:"bytes,2,opt,name=modules,proto3" json:"modules,omitempty"`
}

func (x *DeviceModulesConfig) Reset() {
	*x = DeviceModulesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModulesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModulesConfig) ProtoMessage() {}

func (x *DeviceModulesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModulesConfig.ProtoReflect.Descriptor instead.
func (*DeviceModulesConfig) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceModulesConfig) GetSyncRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncRequested
	}
	return nil
}

func (x *DeviceModulesConfig) GetModules() *DeviceModules {
	if x != nil {
		return x.Modules
	}
	return nil
}

type DeviceRuntimeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logging *LoggingSettings `protobuf:"bytes,1,opt,name=logging,proto3" json:"logging,omitempty"`
	Metrics *MetricsSettings `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *DeviceRuntimeSettings) Reset() {
	*x = DeviceRuntimeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRuntimeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRuntimeSettings) ProtoMessage() {}

func (x *DeviceRuntimeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRuntimeSettings.ProtoReflect.Descriptor instead.
func (*DeviceRuntimeSettings) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceRuntimeSettings) GetLogging() *LoggingSettings {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *DeviceRuntimeSettings) GetMetrics() *MetricsSettings {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type LoggingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LogData_Level `protobuf:"varint,1,opt,name=level,proto3,enum=toit.model.LogData_Level" json:"level,omitempty"`
}

func (x *LoggingSettings) Reset() {
	*x = LoggingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingSettings) ProtoMessage() {}

func (x *LoggingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingSettings.ProtoReflect.Descriptor instead.
func (*LoggingSettings) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{3}
}

func (x *LoggingSettings) GetLevel() LogData_Level {
	if x != nil {
		return x.Level
	}
	return LogData_PRINT_LEVEL
}

type MetricsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level MetricsData_Level `protobuf:"varint,1,opt,name=level,proto3,enum=toit.model.MetricsData_Level" json:"level,omitempty"`
}

func (x *MetricsSettings) Reset() {
	*x = MetricsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSettings) ProtoMessage() {}

func (x *MetricsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsSettings.ProtoReflect.Descriptor instead.
func (*MetricsSettings) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{4}
}

func (x *MetricsSettings) GetLevel() MetricsData_Level {
	if x != nil {
		return x.Level
	}
	return MetricsData_DEBUG_LEVEL
}

type DeviceConnectionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxOffline  *durationpb.Duration `protobuf:"bytes,1,opt,name=max_offline,json=maxOffline,proto3" json:"max_offline,omitempty"`
	Connections []*ConnectionSetting `protobuf:"bytes,2,rep,name=connections,proto3" json:"connections,omitempty"`
	// Must be between 0-100
	EventQueueThreshold uint32 `protobuf:"varint,3,opt,name=event_queue_threshold,json=eventQueueThreshold,proto3" json:"event_queue_threshold,omitempty"`
}

func (x *DeviceConnectionSettings) Reset() {
	*x = DeviceConnectionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConnectionSettings) ProtoMessage() {}

func (x *DeviceConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConnectionSettings.ProtoReflect.Descriptor instead.
func (*DeviceConnectionSettings) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceConnectionSettings) GetMaxOffline() *durationpb.Duration {
	if x != nil {
		return x.MaxOffline
	}
	return nil
}

func (x *DeviceConnectionSettings) GetConnections() []*ConnectionSetting {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *DeviceConnectionSettings) GetEventQueueThreshold() uint32 {
	if x != nil {
		return x.EventQueueThreshold
	}
	return 0
}

type ConnectionSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is essentially a one-of but that is not supported when using ubjson
	// encoding as done between the device and the console.
	Wifi  *WifiSetting  `protobuf:"bytes,1,opt,name=wifi,proto3" json:"wifi,omitempty"`
	Nbiot *NBIoTSetting `protobuf:"bytes,2,opt,name=nbiot,proto3" json:"nbiot,omitempty"`
}

func (x *ConnectionSetting) Reset() {
	*x = ConnectionSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSetting) ProtoMessage() {}

func (x *ConnectionSetting) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSetting.ProtoReflect.Descriptor instead.
func (*ConnectionSetting) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionSetting) GetWifi() *WifiSetting {
	if x != nil {
		return x.Wifi
	}
	return nil
}

func (x *ConnectionSetting) GetNbiot() *NBIoTSetting {
	if x != nil {
		return x.Nbiot
	}
	return nil
}

type WifiSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid     string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *WifiSetting) Reset() {
	*x = WifiSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetting) ProtoMessage() {}

func (x *WifiSetting) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetting.ProtoReflect.Descriptor instead.
func (*WifiSetting) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{7}
}

func (x *WifiSetting) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiSetting) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type NBIoTSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apn      string  `protobuf:"bytes,1,opt,name=apn,proto3" json:"apn,omitempty"`
	Bands    []int64 `protobuf:"varint,2,rep,packed,name=bands,proto3" json:"bands,omitempty"`
	Operator string  `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Pin      string  `protobuf:"bytes,4,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *NBIoTSetting) Reset() {
	*x = NBIoTSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NBIoTSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NBIoTSetting) ProtoMessage() {}

func (x *NBIoTSetting) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NBIoTSetting.ProtoReflect.Descriptor instead.
func (*NBIoTSetting) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{8}
}

func (x *NBIoTSetting) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *NBIoTSetting) GetBands() []int64 {
	if x != nil {
		return x.Bands
	}
	return nil
}

func (x *NBIoTSetting) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *NBIoTSetting) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type DeviceBrokerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Cn   string `protobuf:"bytes,3,opt,name=cn,proto3" json:"cn,omitempty"`
	// Deprecated: Do not use.
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *DeviceBrokerSettings) Reset() {
	*x = DeviceBrokerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceBrokerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBrokerSettings) ProtoMessage() {}

func (x *DeviceBrokerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBrokerSettings.ProtoReflect.Descriptor instead.
func (*DeviceBrokerSettings) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceBrokerSettings) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DeviceBrokerSettings) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceBrokerSettings) GetCn() string {
	if x != nil {
		return x.Cn
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeviceBrokerSettings) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Revision       int64                   `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Epoch          []byte                  `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRevision  int64                   `protobuf:"varint,5,opt,name=state_revision,json=stateRevision,proto3" json:"state_revision,omitempty"`
	Updated        *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	ConfigRevision int64                   `protobuf:"varint,3,opt,name=config_revision,json=configRevision,proto3" json:"config_revision,omitempty"`
	Sdk            string                  `protobuf:"bytes,4,opt,name=sdk,proto3" json:"sdk,omitempty"`
	Model          string                  `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	Config         *DeviceConfig           `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	Connected      bool                    `protobuf:"varint,9,opt,name=connected,proto3" json:"connected,omitempty"`
	Boot           *DeviceBootStatus       `protobuf:"bytes,10,opt,name=boot,proto3" json:"boot,omitempty"`
	Health         *DeviceHealth           `protobuf:"bytes,11,opt,name=health,proto3" json:"health,omitempty"`
	Connection     *DeviceConnectionStatus `protobuf:"bytes,12,opt,name=connection,proto3" json:"connection,omitempty"`
	Modules        *DeviceModulesStatus    `protobuf:"bytes,13,opt,name=modules,proto3" json:"modules,omitempty"`
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Do not use.
func (x *DeviceStatus) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *DeviceStatus) GetEpoch() []byte {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *DeviceStatus) GetStateRevision() int64 {
	if x != nil {
		return x.StateRevision
	}
	return 0
}

func (x *DeviceStatus) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *DeviceStatus) GetConfigRevision() int64 {
	if x != nil {
		return x.ConfigRevision
	}
	return 0
}

func (x *DeviceStatus) GetSdk() string {
	if x != nil {
		return x.Sdk
	}
	return ""
}

func (x *DeviceStatus) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceStatus) GetConfig() *DeviceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DeviceStatus) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *DeviceStatus) GetBoot() *DeviceBootStatus {
	if x != nil {
		return x.Boot
	}
	return nil
}

func (x *DeviceStatus) GetHealth() *DeviceHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *DeviceStatus) GetConnection() *DeviceConnectionStatus {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *DeviceStatus) GetModules() *DeviceModulesStatus {
	if x != nil {
		return x.Modules
	}
	return nil
}

type DeviceModulesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Modules     *DeviceModules         `protobuf:"bytes,2,opt,name=modules,proto3" json:"modules,omitempty"`
}

func (x *DeviceModulesStatus) Reset() {
	*x = DeviceModulesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModulesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModulesStatus) ProtoMessage() {}

func (x *DeviceModulesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModulesStatus.ProtoReflect.Descriptor instead.
func (*DeviceModulesStatus) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceModulesStatus) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *DeviceModulesStatus) GetModules() *DeviceModules {
	if x != nil {
		return x.Modules
	}
	return nil
}

type DeviceModules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellular *DeviceModule `protobuf:"bytes,1,opt,name=cellular,proto3" json:"cellular,omitempty"`
}

func (x *DeviceModules) Reset() {
	*x = DeviceModules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModules) ProtoMessage() {}

func (x *DeviceModules) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModules.ProtoReflect.Descriptor instead.
func (*DeviceModules) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceModules) GetCellular() *DeviceModule {
	if x != nil {
		return x.Cellular
	}
	return nil
}

type DeviceModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model   string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeviceModule) Reset() {
	*x = DeviceModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModule) ProtoMessage() {}

func (x *DeviceModule) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModule.ProtoReflect.Descriptor instead.
func (*DeviceModule) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceModule) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceModule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeviceConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Type  DeviceConnectionType `protobuf:"varint,2,opt,name=type,proto3,enum=toit.model.DeviceConnectionType" json:"type,omitempty"`
}

func (x *DeviceConnectionStatus) Reset() {
	*x = DeviceConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConnectionStatus) ProtoMessage() {}

func (x *DeviceConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConnectionStatus.ProtoReflect.Descriptor instead.
func (*DeviceConnectionStatus) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceConnectionStatus) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DeviceConnectionStatus) GetType() DeviceConnectionType {
	if x != nil {
		return x.Type
	}
	return DeviceConnectionType_DEVICE_CONNECTION_TYPE_UNKNOWN
}

type DeviceBootStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBoot        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_boot,json=lastBoot,proto3" json:"last_boot,omitempty"`
	InFactory       bool                   `protobuf:"varint,2,opt,name=in_factory,json=inFactory,proto3" json:"in_factory,omitempty"`
	LastFactoryBoot *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_factory_boot,json=lastFactoryBoot,proto3" json:"last_factory_boot,omitempty"`
}

func (x *DeviceBootStatus) Reset() {
	*x = DeviceBootStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceBootStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBootStatus) ProtoMessage() {}

func (x *DeviceBootStatus) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBootStatus.ProtoReflect.Descriptor instead.
func (*DeviceBootStatus) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{15}
}

func (x *DeviceBootStatus) GetLastBoot() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBoot
	}
	return nil
}

func (x *DeviceBootStatus) GetInFactory() bool {
	if x != nil {
		return x.InFactory
	}
	return false
}

func (x *DeviceBootStatus) GetLastFactoryBoot() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFactoryBoot
	}
	return nil
}

type DeviceHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power        *DeviceHealth_Power        `protobuf:"bytes,1,opt,name=power,proto3" json:"power,omitempty"`
	BatteryCurve *DeviceHealth_BatteryCurve `protobuf:"bytes,2,opt,name=battery_curve,json=batteryCurve,proto3" json:"battery_curve,omitempty"`
	Connectivity *DeviceHealth_Connectivity `protobuf:"bytes,3,opt,name=connectivity,proto3" json:"connectivity,omitempty"`
}

func (x *DeviceHealth) Reset() {
	*x = DeviceHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHealth) ProtoMessage() {}

func (x *DeviceHealth) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHealth.ProtoReflect.Descriptor instead.
func (*DeviceHealth) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceHealth) GetPower() *DeviceHealth_Power {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *DeviceHealth) GetBatteryCurve() *DeviceHealth_BatteryCurve {
	if x != nil {
		return x.BatteryCurve
	}
	return nil
}

func (x *DeviceHealth) GetConnectivity() *DeviceHealth_Connectivity {
	if x != nil {
		return x.Connectivity
	}
	return nil
}

type HardwareIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId     []byte `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	SequenceNumber int64  `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Batch          string `protobuf:"bytes,3,opt,name=batch,proto3" json:"batch,omitempty"`
	PrivateKey     []byte `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Certificate    []byte `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *HardwareIdentity) Reset() {
	*x = HardwareIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareIdentity) ProtoMessage() {}

func (x *HardwareIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareIdentity.ProtoReflect.Descriptor instead.
func (*HardwareIdentity) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{17}
}

func (x *HardwareIdentity) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *HardwareIdentity) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *HardwareIdentity) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *HardwareIdentity) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *HardwareIdentity) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type HardwareIdentityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactorySdkVersion  string `protobuf:"bytes,1,opt,name=factory_sdk_version,json=factorySdkVersion,proto3" json:"factory_sdk_version,omitempty"`
	FlashedBy          []byte `protobuf:"bytes,2,opt,name=flashed_by,json=flashedBy,proto3" json:"flashed_by,omitempty"`
	Iccid              string `protobuf:"bytes,3,opt,name=iccid,proto3" json:"iccid,omitempty"`
	ChipId             string `protobuf:"bytes,4,opt,name=chip_id,json=chipId,proto3" json:"chip_id,omitempty"`
	FactoryDeviceModel string `protobuf:"bytes,5,opt,name=factory_device_model,json=factoryDeviceModel,proto3" json:"factory_device_model,omitempty"`
}

func (x *HardwareIdentityInfo) Reset() {
	*x = HardwareIdentityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareIdentityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareIdentityInfo) ProtoMessage() {}

func (x *HardwareIdentityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareIdentityInfo.ProtoReflect.Descriptor instead.
func (*HardwareIdentityInfo) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{18}
}

func (x *HardwareIdentityInfo) GetFactorySdkVersion() string {
	if x != nil {
		return x.FactorySdkVersion
	}
	return ""
}

func (x *HardwareIdentityInfo) GetFlashedBy() []byte {
	if x != nil {
		return x.FlashedBy
	}
	return nil
}

func (x *HardwareIdentityInfo) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *HardwareIdentityInfo) GetChipId() string {
	if x != nil {
		return x.ChipId
	}
	return ""
}

func (x *HardwareIdentityInfo) GetFactoryDeviceModel() string {
	if x != nil {
		return x.FactoryDeviceModel
	}
	return ""
}

type HardwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId     []byte `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	HardwareFqdn   string `protobuf:"bytes,2,opt,name=hardware_fqdn,json=hardwareFqdn,proto3" json:"hardware_fqdn,omitempty"`
	OrganizationId []byte `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *HardwareInfo) Reset() {
	*x = HardwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareInfo) ProtoMessage() {}

func (x *HardwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareInfo.ProtoReflect.Descriptor instead.
func (*HardwareInfo) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{19}
}

func (x *HardwareInfo) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *HardwareInfo) GetHardwareFqdn() string {
	if x != nil {
		return x.HardwareFqdn
	}
	return ""
}

func (x *HardwareInfo) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

type HardwareToDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId []byte                 `protobuf:"bytes,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	DeviceId   []byte                 `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Bound      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=bound,proto3" json:"bound,omitempty"`
	Unbound    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=unbound,proto3" json:"unbound,omitempty"`
}

func (x *HardwareToDeviceInfo) Reset() {
	*x = HardwareToDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareToDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareToDeviceInfo) ProtoMessage() {}

func (x *HardwareToDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareToDeviceInfo.ProtoReflect.Descriptor instead.
func (*HardwareToDeviceInfo) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{20}
}

func (x *HardwareToDeviceInfo) GetHardwareId() []byte {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *HardwareToDeviceInfo) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *HardwareToDeviceInfo) GetBound() *timestamppb.Timestamp {
	if x != nil {
		return x.Bound
	}
	return nil
}

func (x *HardwareToDeviceInfo) GetUnbound() *timestamppb.Timestamp {
	if x != nil {
		return x.Unbound
	}
	return nil
}

type DeviceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Together with the device_id, it globally identifies the event. Device
	// events can be sorted, and will always be returned in increasing order.
	EventId     []byte                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Type        DeviceEvent_Type       `protobuf:"varint,4,opt,name=type,proto3,enum=toit.model.DeviceEvent_Type" json:"type,omitempty"`
	Msg         string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Data        []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Initiater   *DeviceEvent_Initiater `protobuf:"bytes,7,opt,name=initiater,proto3" json:"initiater,omitempty"`
	Information []*DeviceEvent_Info    `protobuf:"bytes,8,rep,name=information,proto3" json:"information,omitempty"`
}

func (x *DeviceEvent) Reset() {
	*x = DeviceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent) ProtoMessage() {}

func (x *DeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent.ProtoReflect.Descriptor instead.
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceEvent) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceEvent) GetEventId() []byte {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *DeviceEvent) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DeviceEvent) GetType() DeviceEvent_Type {
	if x != nil {
		return x.Type
	}
	return DeviceEvent_UNKNOWN
}

func (x *DeviceEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeviceEvent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceEvent) GetInitiater() *DeviceEvent_Initiater {
	if x != nil {
		return x.Initiater
	}
	return nil
}

func (x *DeviceEvent) GetInformation() []*DeviceEvent_Info {
	if x != nil {
		return x.Information
	}
	return nil
}

type DeviceModelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters map[string]int32 `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeviceModelSettings) Reset() {
	*x = DeviceModelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModelSettings) ProtoMessage() {}

func (x *DeviceModelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModelSettings.ProtoReflect.Descriptor instead.
func (*DeviceModelSettings) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceModelSettings) GetParameters() map[string]int32 {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type DeviceHealth_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       *DeviceHealth_Power_Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	LastUpdated *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *DeviceHealth_Power) Reset() {
	*x = DeviceHealth_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHealth_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHealth_Power) ProtoMessage() {}

func (x *DeviceHealth_Power) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHealth_Power.ProtoReflect.Descriptor instead.
func (*DeviceHealth_Power) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DeviceHealth_Power) GetValue() *DeviceHealth_Power_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DeviceHealth_Power) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type DeviceHealth_BatteryCurve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slope       float64                `protobuf:"fixed64,1,opt,name=slope,proto3" json:"slope,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *DeviceHealth_BatteryCurve) Reset() {
	*x = DeviceHealth_BatteryCurve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHealth_BatteryCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHealth_BatteryCurve) ProtoMessage() {}

func (x *DeviceHealth_BatteryCurve) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHealth_BatteryCurve.ProtoReflect.Descriptor instead.
func (*DeviceHealth_BatteryCurve) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{16, 1}
}

func (x *DeviceHealth_BatteryCurve) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *DeviceHealth_BatteryCurve) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type DeviceHealth_Connectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSeen  *timestamppb.Timestamp               `protobuf:"bytes,1,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Connected bool                                 `protobuf:"varint,2,opt,name=connected,proto3" json:"connected,omitempty"`
	Checkins  []*DeviceHealth_Connectivity_Checkin `protobuf:"bytes,3,rep,name=checkins,proto3" json:"checkins,omitempty"`
}

func (x *DeviceHealth_Connectivity) Reset() {
	*x = DeviceHealth_Connectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHealth_Connectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHealth_Connectivity) ProtoMessage() {}

func (x *DeviceHealth_Connectivity) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHealth_Connectivity.ProtoReflect.Descriptor instead.
func (*DeviceHealth_Connectivity) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{16, 2}
}

func (x *DeviceHealth_Connectivity) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *DeviceHealth_Connectivity) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *DeviceHealth_Connectivity) GetCheckins() []*DeviceHealth_Connectivity_Checkin {
	if x != nil {
		return x.Checkins
	}
	return nil
}

type DeviceHealth_Power_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Power:
	//	*DeviceHealth_Power_Value_Battery
	//	*DeviceHealth_Power_Value_Pluggedin
	Power isDeviceHealth_Power_Value_Power `protobuf_oneof:"power"`
}

func (x *DeviceHealth_Power_Value) Reset() {
	*x = DeviceHealth_Power_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHealth_Power_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHealth_Power_Value) ProtoMessage() {}

func (x *DeviceHealth_Power_Value) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHealth_Power_Value.ProtoReflect.Descriptor instead.
func (*DeviceHealth_Power_Value) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (m *DeviceHealth_Power_Value) GetPower() isDeviceHealth_Power_Value_Power {
	if m != nil {
		return m.Power
	}
	return nil
}

func (x *DeviceHealth_Power_Value) GetBattery() float64 {
	if x, ok := x.GetPower().(*DeviceHealth_Power_Value_Battery); ok {
		return x.Battery
	}
	return 0
}

func (x *DeviceHealth_Power_Value) GetPluggedin() *emptypb.Empty {
	if x, ok := x.GetPower().(*DeviceHealth_Power_Value_Pluggedin); ok {
		return x.Pluggedin
	}
	return nil
}

type isDeviceHealth_Power_Value_Power interface {
	isDeviceHealth_Power_Value_Power()
}

type DeviceHealth_Power_Value_Battery struct {
	Battery float64 `protobuf:"fixed64,1,opt,name=battery,proto3,oneof"`
}

type DeviceHealth_Power_Value_Pluggedin struct {
	Pluggedin *emptypb.Empty `protobuf:"bytes,2,opt,name=pluggedin,proto3,oneof"`
}

func (*DeviceHealth_Power_Value_Battery) isDeviceHealth_Power_Value_Power() {}

func (*DeviceHealth_Power_Value_Pluggedin) isDeviceHealth_Power_Value_Power() {}

type DeviceHealth_Connectivity_Checkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Missed bool `protobuf:"varint,1,opt,name=missed,proto3" json:"missed,omitempty"`
}

func (x *DeviceHealth_Connectivity_Checkin) Reset() {
	*x = DeviceHealth_Connectivity_Checkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHealth_Connectivity_Checkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHealth_Connectivity_Checkin) ProtoMessage() {}

func (x *DeviceHealth_Connectivity_Checkin) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHealth_Connectivity_Checkin.ProtoReflect.Descriptor instead.
func (*DeviceHealth_Connectivity_Checkin) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{16, 2, 0}
}

func (x *DeviceHealth_Connectivity_Checkin) GetMissed() bool {
	if x != nil {
		return x.Missed
	}
	return false
}

type DeviceEvent_Initiater struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Initiater:
	//	*DeviceEvent_Initiater_Device_
	//	*DeviceEvent_Initiater_Console_
	//	*DeviceEvent_Initiater_User_
	Initiater isDeviceEvent_Initiater_Initiater `protobuf_oneof:"initiater"`
}

func (x *DeviceEvent_Initiater) Reset() {
	*x = DeviceEvent_Initiater{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Initiater) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Initiater) ProtoMessage() {}

func (x *DeviceEvent_Initiater) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Initiater.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Initiater) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 0}
}

func (m *DeviceEvent_Initiater) GetInitiater() isDeviceEvent_Initiater_Initiater {
	if m != nil {
		return m.Initiater
	}
	return nil
}

func (x *DeviceEvent_Initiater) GetDevice() *DeviceEvent_Initiater_Device {
	if x, ok := x.GetInitiater().(*DeviceEvent_Initiater_Device_); ok {
		return x.Device
	}
	return nil
}

func (x *DeviceEvent_Initiater) GetConsole() *DeviceEvent_Initiater_Console {
	if x, ok := x.GetInitiater().(*DeviceEvent_Initiater_Console_); ok {
		return x.Console
	}
	return nil
}

func (x *DeviceEvent_Initiater) GetUser() *DeviceEvent_Initiater_User {
	if x, ok := x.GetInitiater().(*DeviceEvent_Initiater_User_); ok {
		return x.User
	}
	return nil
}

type isDeviceEvent_Initiater_Initiater interface {
	isDeviceEvent_Initiater_Initiater()
}

type DeviceEvent_Initiater_Device_ struct {
	Device *DeviceEvent_Initiater_Device `protobuf:"bytes,1,opt,name=device,proto3,oneof"`
}

type DeviceEvent_Initiater_Console_ struct {
	Console *DeviceEvent_Initiater_Console `protobuf:"bytes,2,opt,name=console,proto3,oneof"`
}

type DeviceEvent_Initiater_User_ struct {
	User *DeviceEvent_Initiater_User `protobuf:"bytes,3,opt,name=user,proto3,oneof"`
}

func (*DeviceEvent_Initiater_Device_) isDeviceEvent_Initiater_Initiater() {}

func (*DeviceEvent_Initiater_Console_) isDeviceEvent_Initiater_Initiater() {}

func (*DeviceEvent_Initiater_User_) isDeviceEvent_Initiater_Initiater() {}

type DeviceEvent_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *DeviceEvent_Info_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceEvent_Info) Reset() {
	*x = DeviceEvent_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Info) ProtoMessage() {}

func (x *DeviceEvent_Info) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Info.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Info) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 1}
}

func (x *DeviceEvent_Info) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeviceEvent_Info) GetValue() *DeviceEvent_Info_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceEvent_Initiater_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeviceEvent_Initiater_Device) Reset() {
	*x = DeviceEvent_Initiater_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Initiater_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Initiater_Device) ProtoMessage() {}

func (x *DeviceEvent_Initiater_Device) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Initiater_Device.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Initiater_Device) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 0, 0}
}

func (x *DeviceEvent_Initiater_Device) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

type DeviceEvent_Initiater_Console struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceEvent_Initiater_Console) Reset() {
	*x = DeviceEvent_Initiater_Console{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Initiater_Console) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Initiater_Console) ProtoMessage() {}

func (x *DeviceEvent_Initiater_Console) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Initiater_Console.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Initiater_Console) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 0, 1}
}

type DeviceEvent_Initiater_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []byte `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeviceEvent_Initiater_User) Reset() {
	*x = DeviceEvent_Initiater_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Initiater_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Initiater_User) ProtoMessage() {}

func (x *DeviceEvent_Initiater_User) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Initiater_User.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Initiater_User) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 0, 2}
}

func (x *DeviceEvent_Initiater_User) GetUserId() []byte {
	if x != nil {
		return x.UserId
	}
	return nil
}

type DeviceEvent_Info_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*DeviceEvent_Info_Value_Primitive_
	//	*DeviceEvent_Info_Value_Diff_
	//	*DeviceEvent_Info_Value_Error_
	Value isDeviceEvent_Info_Value_Value `protobuf_oneof:"value"`
}

func (x *DeviceEvent_Info_Value) Reset() {
	*x = DeviceEvent_Info_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Info_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Info_Value) ProtoMessage() {}

func (x *DeviceEvent_Info_Value) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Info_Value.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Info_Value) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 1, 0}
}

func (m *DeviceEvent_Info_Value) GetValue() isDeviceEvent_Info_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DeviceEvent_Info_Value) GetPrimitive() *DeviceEvent_Info_Value_Primitive {
	if x, ok := x.GetValue().(*DeviceEvent_Info_Value_Primitive_); ok {
		return x.Primitive
	}
	return nil
}

func (x *DeviceEvent_Info_Value) GetDiff() *DeviceEvent_Info_Value_Diff {
	if x, ok := x.GetValue().(*DeviceEvent_Info_Value_Diff_); ok {
		return x.Diff
	}
	return nil
}

func (x *DeviceEvent_Info_Value) GetError() *DeviceEvent_Info_Value_Error {
	if x, ok := x.GetValue().(*DeviceEvent_Info_Value_Error_); ok {
		return x.Error
	}
	return nil
}

type isDeviceEvent_Info_Value_Value interface {
	isDeviceEvent_Info_Value_Value()
}

type DeviceEvent_Info_Value_Primitive_ struct {
	Primitive *DeviceEvent_Info_Value_Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type DeviceEvent_Info_Value_Diff_ struct {
	Diff *DeviceEvent_Info_Value_Diff `protobuf:"bytes,2,opt,name=diff,proto3,oneof"`
}

type DeviceEvent_Info_Value_Error_ struct {
	Error *DeviceEvent_Info_Value_Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DeviceEvent_Info_Value_Primitive_) isDeviceEvent_Info_Value_Value() {}

func (*DeviceEvent_Info_Value_Diff_) isDeviceEvent_Info_Value_Value() {}

func (*DeviceEvent_Info_Value_Error_) isDeviceEvent_Info_Value_Value() {}

type DeviceEvent_Info_Value_Primitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DeviceEvent_Info_Value_Primitive_Type `protobuf:"varint,1,opt,name=type,proto3,enum=toit.model.DeviceEvent_Info_Value_Primitive_Type" json:"type,omitempty"`
	Value []byte                                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceEvent_Info_Value_Primitive) Reset() {
	*x = DeviceEvent_Info_Value_Primitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Info_Value_Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Info_Value_Primitive) ProtoMessage() {}

func (x *DeviceEvent_Info_Value_Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Info_Value_Primitive.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Info_Value_Primitive) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 1, 0, 0}
}

func (x *DeviceEvent_Info_Value_Primitive) GetType() DeviceEvent_Info_Value_Primitive_Type {
	if x != nil {
		return x.Type
	}
	return DeviceEvent_Info_Value_Primitive_INVALID
}

func (x *DeviceEvent_Info_Value_Primitive) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceEvent_Info_Value_Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *DeviceEvent_Info_Value_Primitive `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *DeviceEvent_Info_Value_Primitive `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *DeviceEvent_Info_Value_Diff) Reset() {
	*x = DeviceEvent_Info_Value_Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Info_Value_Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Info_Value_Diff) ProtoMessage() {}

func (x *DeviceEvent_Info_Value_Diff) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Info_Value_Diff.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Info_Value_Diff) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 1, 0, 1}
}

func (x *DeviceEvent_Info_Value_Diff) GetFrom() *DeviceEvent_Info_Value_Primitive {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DeviceEvent_Info_Value_Diff) GetTo() *DeviceEvent_Info_Value_Primitive {
	if x != nil {
		return x.To
	}
	return nil
}

type DeviceEvent_Info_Value_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceEvent_Info_Value_Error) Reset() {
	*x = DeviceEvent_Info_Value_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toit_model_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent_Info_Value_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent_Info_Value_Error) ProtoMessage() {}

func (x *DeviceEvent_Info_Value_Error) ProtoReflect() protoreflect.Message {
	mi := &file_toit_model_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent_Info_Value_Error.ProtoReflect.Descriptor instead.
func (*DeviceEvent_Info_Value_Error) Descriptor() ([]byte, []int) {
	return file_toit_model_device_proto_rawDescGZIP(), []int{21, 1, 0, 2}
}

func (x *DeviceEvent_Info_Value_Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_toit_model_device_proto protoreflect.FileDescriptor

var file_toit_model_device_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x6f, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x6f, 0x69, 0x74, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x6f, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x04, 0x0a, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x64, 0x6b, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x69,
	0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x69, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x42, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x46, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xcb, 0x01,
	0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x70, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2b, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x77, 0x69, 0x66, 0x69, 0x12, 0x2e, 0x0a,
	0x05, 0x6e, 0x62, 0x69, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x42, 0x49, 0x6f, 0x54, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6e, 0x62, 0x69, 0x6f, 0x74, 0x22, 0x3d, 0x0a,
	0x0b, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x64, 0x0a, 0x0c,
	0x4e, 0x42, 0x49, 0x6f, 0x54, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x62,
	0x61, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x69, 0x6e, 0x22, 0x6e, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x63, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x22, 0xa5, 0x04, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x64, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x69, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x69, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x3e, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a,
	0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6f,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6f, 0x6f,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x74, 0x22, 0x81, 0x06, 0x0a, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0xe8, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x64, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x12, 0x36, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x69, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x1a, 0x63, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xd3, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x49,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x52,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x73, 0x1a, 0x21, 0x0a, 0x07, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x22, 0xb5, 0x01, 0x0a,
	0x10, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x7d, 0x0a,
	0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46,
	0x71, 0x64, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a,
	0x14, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x86, 0x0b, 0x0a, 0x0b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xb4, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x6f, 0x69, 0x74,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x25, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x1a, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x1a, 0x1f, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x72, 0x1a, 0xf2, 0x04, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9d,
	0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x93, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x86, 0x01,
	0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x40, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x1d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x06, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x9c, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x42, 0x49, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x10, 0x03, 0x2a, 0xda, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x17, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52,
	0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x4c, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xb4, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f,
	0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49,
	0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x43, 0x49, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10,
	0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x53, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x0c, 0x2a, 0x2d, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x01, 0x42, 0x62, 0x0a, 0x18,
	0x69, 0x6f, 0x2e, 0x74, 0x6f, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x6f,
	0x69, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x6f, 0x69, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x69, 0x74, 0x2f, 0x74, 0x6f, 0x69, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xaa, 0x02, 0x10,
	0x54, 0x6f, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_toit_model_device_proto_rawDescOnce sync.Once
	file_toit_model_device_proto_rawDescData = file_toit_model_device_proto_rawDesc
)

func file_toit_model_device_proto_rawDescGZIP() []byte {
	file_toit_model_device_proto_rawDescOnce.Do(func() {
		file_toit_model_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_toit_model_device_proto_rawDescData)
	})
	return file_toit_model_device_proto_rawDescData
}

var file_toit_model_device_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_toit_model_device_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_toit_model_device_proto_goTypes = []interface{}{
	(DeviceConnectionType)(0),                  // 0: toit.model.DeviceConnectionType
	(DeviceChangeType)(0),                      // 1: toit.model.DeviceChangeType
	(DeviceSessionChangeType)(0),               // 2: toit.model.DeviceSessionChangeType
	(DeviceAction)(0),                          // 3: toit.model.DeviceAction
	(DeviceModuleType)(0),                      // 4: toit.model.DeviceModuleType
	(DeviceEvent_Type)(0),                      // 5: toit.model.DeviceEvent.Type
	(DeviceEvent_Info_Value_Primitive_Type)(0), // 6: toit.model.DeviceEvent.Info.Value.Primitive.Type
	(*DeviceConfig)(nil),                       // 7: toit.model.DeviceConfig
	(*DeviceModulesConfig)(nil),                // 8: toit.model.DeviceModulesConfig
	(*DeviceRuntimeSettings)(nil),              // 9: toit.model.DeviceRuntimeSettings
	(*LoggingSettings)(nil),                    // 10: toit.model.LoggingSettings
	(*MetricsSettings)(nil),                    // 11: toit.model.MetricsSettings
	(*DeviceConnectionSettings)(nil),           // 12: toit.model.DeviceConnectionSettings
	(*ConnectionSetting)(nil),                  // 13: toit.model.ConnectionSetting
	(*WifiSetting)(nil),                        // 14: toit.model.WifiSetting
	(*NBIoTSetting)(nil),                       // 15: toit.model.NBIoTSetting
	(*DeviceBrokerSettings)(nil),               // 16: toit.model.DeviceBrokerSettings
	(*DeviceStatus)(nil),                       // 17: toit.model.DeviceStatus
	(*DeviceModulesStatus)(nil),                // 18: toit.model.DeviceModulesStatus
	(*DeviceModules)(nil),                      // 19: toit.model.DeviceModules
	(*DeviceModule)(nil),                       // 20: toit.model.DeviceModule
	(*DeviceConnectionStatus)(nil),             // 21: toit.model.DeviceConnectionStatus
	(*DeviceBootStatus)(nil),                   // 22: toit.model.DeviceBootStatus
	(*DeviceHealth)(nil),                       // 23: toit.model.DeviceHealth
	(*HardwareIdentity)(nil),                   // 24: toit.model.HardwareIdentity
	(*HardwareIdentityInfo)(nil),               // 25: toit.model.HardwareIdentityInfo
	(*HardwareInfo)(nil),                       // 26: toit.model.HardwareInfo
	(*HardwareToDeviceInfo)(nil),               // 27: toit.model.HardwareToDeviceInfo
	(*DeviceEvent)(nil),                        // 28: toit.model.DeviceEvent
	(*DeviceModelSettings)(nil),                // 29: toit.model.DeviceModelSettings
	(*DeviceHealth_Power)(nil),                 // 30: toit.model.DeviceHealth.Power
	(*DeviceHealth_BatteryCurve)(nil),          // 31: toit.model.DeviceHealth.BatteryCurve
	(*DeviceHealth_Connectivity)(nil),          // 32: toit.model.DeviceHealth.Connectivity
	(*DeviceHealth_Power_Value)(nil),           // 33: toit.model.DeviceHealth.Power.Value
	(*DeviceHealth_Connectivity_Checkin)(nil),  // 34: toit.model.DeviceHealth.Connectivity.Checkin
	(*DeviceEvent_Initiater)(nil),              // 35: toit.model.DeviceEvent.Initiater
	(*DeviceEvent_Info)(nil),                   // 36: toit.model.DeviceEvent.Info
	(*DeviceEvent_Initiater_Device)(nil),       // 37: toit.model.DeviceEvent.Initiater.Device
	(*DeviceEvent_Initiater_Console)(nil),      // 38: toit.model.DeviceEvent.Initiater.Console
	(*DeviceEvent_Initiater_User)(nil),         // 39: toit.model.DeviceEvent.Initiater.User
	(*DeviceEvent_Info_Value)(nil),             // 40: toit.model.DeviceEvent.Info.Value
	(*DeviceEvent_Info_Value_Primitive)(nil),   // 41: toit.model.DeviceEvent.Info.Value.Primitive
	(*DeviceEvent_Info_Value_Diff)(nil),        // 42: toit.model.DeviceEvent.Info.Value.Diff
	(*DeviceEvent_Info_Value_Error)(nil),       // 43: toit.model.DeviceEvent.Info.Value.Error
	nil,                                        // 44: toit.model.DeviceModelSettings.ParametersEntry
	(*timestamppb.Timestamp)(nil),              // 45: google.protobuf.Timestamp
	(LogData_Level)(0),                         // 46: toit.model.LogData.Level
	(MetricsData_Level)(0),                     // 47: toit.model.MetricsData.Level
	(*durationpb.Duration)(nil),                // 48: google.protobuf.Duration
	(*emptypb.Empty)(nil),                      // 49: google.protobuf.Empty
}
var file_toit_model_device_proto_depIdxs = []int32{
	45, // 0: toit.model.DeviceConfig.started_after:type_name -> google.protobuf.Timestamp
	16, // 1: toit.model.DeviceConfig.broker:type_name -> toit.model.DeviceBrokerSettings
	12, // 2: toit.model.DeviceConfig.connection:type_name -> toit.model.DeviceConnectionSettings
	45, // 3: toit.model.DeviceConfig.factory_after:type_name -> google.protobuf.Timestamp
	9,  // 4: toit.model.DeviceConfig.runtime:type_name -> toit.model.DeviceRuntimeSettings
	8,  // 5: toit.model.DeviceConfig.modules:type_name -> toit.model.DeviceModulesConfig
	29, // 6: toit.model.DeviceConfig.model_settings:type_name -> toit.model.DeviceModelSettings
	45, // 7: toit.model.DeviceModulesConfig.sync_requested:type_name -> google.protobuf.Timestamp
	19, // 8: toit.model.DeviceModulesConfig.modules:type_name -> toit.model.DeviceModules
	10, // 9: toit.model.DeviceRuntimeSettings.logging:type_name -> toit.model.LoggingSettings
	11, // 10: toit.model.DeviceRuntimeSettings.metrics:type_name -> toit.model.MetricsSettings
	46, // 11: toit.model.LoggingSettings.level:type_name -> toit.model.LogData.Level
	47, // 12: toit.model.MetricsSettings.level:type_name -> toit.model.MetricsData.Level
	48, // 13: toit.model.DeviceConnectionSettings.max_offline:type_name -> google.protobuf.Duration
	13, // 14: toit.model.DeviceConnectionSettings.connections:type_name -> toit.model.ConnectionSetting
	14, // 15: toit.model.ConnectionSetting.wifi:type_name -> toit.model.WifiSetting
	15, // 16: toit.model.ConnectionSetting.nbiot:type_name -> toit.model.NBIoTSetting
	45, // 17: toit.model.DeviceStatus.updated:type_name -> google.protobuf.Timestamp
	7,  // 18: toit.model.DeviceStatus.config:type_name -> toit.model.DeviceConfig
	22, // 19: toit.model.DeviceStatus.boot:type_name -> toit.model.DeviceBootStatus
	23, // 20: toit.model.DeviceStatus.health:type_name -> toit.model.DeviceHealth
	21, // 21: toit.model.DeviceStatus.connection:type_name -> toit.model.DeviceConnectionStatus
	18, // 22: toit.model.DeviceStatus.modules:type_name -> toit.model.DeviceModulesStatus
	45, // 23: toit.model.DeviceModulesStatus.last_updated:type_name -> google.protobuf.Timestamp
	19, // 24: toit.model.DeviceModulesStatus.modules:type_name -> toit.model.DeviceModules
	20, // 25: toit.model.DeviceModules.cellular:type_name -> toit.model.DeviceModule
	0,  // 26: toit.model.DeviceConnectionStatus.type:type_name -> toit.model.DeviceConnectionType
	45, // 27: toit.model.DeviceBootStatus.last_boot:type_name -> google.protobuf.Timestamp
	45, // 28: toit.model.DeviceBootStatus.last_factory_boot:type_name -> google.protobuf.Timestamp
	30, // 29: toit.model.DeviceHealth.power:type_name -> toit.model.DeviceHealth.Power
	31, // 30: toit.model.DeviceHealth.battery_curve:type_name -> toit.model.DeviceHealth.BatteryCurve
	32, // 31: toit.model.DeviceHealth.connectivity:type_name -> toit.model.DeviceHealth.Connectivity
	45, // 32: toit.model.HardwareToDeviceInfo.bound:type_name -> google.protobuf.Timestamp
	45, // 33: toit.model.HardwareToDeviceInfo.unbound:type_name -> google.protobuf.Timestamp
	45, // 34: toit.model.DeviceEvent.created:type_name -> google.protobuf.Timestamp
	5,  // 35: toit.model.DeviceEvent.type:type_name -> toit.model.DeviceEvent.Type
	35, // 36: toit.model.DeviceEvent.initiater:type_name -> toit.model.DeviceEvent.Initiater
	36, // 37: toit.model.DeviceEvent.information:type_name -> toit.model.DeviceEvent.Info
	44, // 38: toit.model.DeviceModelSettings.parameters:type_name -> toit.model.DeviceModelSettings.ParametersEntry
	33, // 39: toit.model.DeviceHealth.Power.value:type_name -> toit.model.DeviceHealth.Power.Value
	45, // 40: toit.model.DeviceHealth.Power.last_updated:type_name -> google.protobuf.Timestamp
	45, // 41: toit.model.DeviceHealth.BatteryCurve.last_updated:type_name -> google.protobuf.Timestamp
	45, // 42: toit.model.DeviceHealth.Connectivity.last_seen:type_name -> google.protobuf.Timestamp
	34, // 43: toit.model.DeviceHealth.Connectivity.checkins:type_name -> toit.model.DeviceHealth.Connectivity.Checkin
	49, // 44: toit.model.DeviceHealth.Power.Value.pluggedin:type_name -> google.protobuf.Empty
	37, // 45: toit.model.DeviceEvent.Initiater.device:type_name -> toit.model.DeviceEvent.Initiater.Device
	38, // 46: toit.model.DeviceEvent.Initiater.console:type_name -> toit.model.DeviceEvent.Initiater.Console
	39, // 47: toit.model.DeviceEvent.Initiater.user:type_name -> toit.model.DeviceEvent.Initiater.User
	40, // 48: toit.model.DeviceEvent.Info.value:type_name -> toit.model.DeviceEvent.Info.Value
	41, // 49: toit.model.DeviceEvent.Info.Value.primitive:type_name -> toit.model.DeviceEvent.Info.Value.Primitive
	42, // 50: toit.model.DeviceEvent.Info.Value.diff:type_name -> toit.model.DeviceEvent.Info.Value.Diff
	43, // 51: toit.model.DeviceEvent.Info.Value.error:type_name -> toit.model.DeviceEvent.Info.Value.Error
	6,  // 52: toit.model.DeviceEvent.Info.Value.Primitive.type:type_name -> toit.model.DeviceEvent.Info.Value.Primitive.Type
	41, // 53: toit.model.DeviceEvent.Info.Value.Diff.from:type_name -> toit.model.DeviceEvent.Info.Value.Primitive
	41, // 54: toit.model.DeviceEvent.Info.Value.Diff.to:type_name -> toit.model.DeviceEvent.Info.Value.Primitive
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_toit_model_device_proto_init() }
func file_toit_model_device_proto_init() {
	if File_toit_model_device_proto != nil {
		return
	}
	file_toit_model_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_toit_model_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModulesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRuntimeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConnectionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NBIoTSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceBrokerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModulesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceBootStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareIdentityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareToDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHealth_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHealth_BatteryCurve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHealth_Connectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHealth_Power_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHealth_Connectivity_Checkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Initiater); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Initiater_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Initiater_Console); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Initiater_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Info_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Info_Value_Primitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Info_Value_Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toit_model_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent_Info_Value_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_toit_model_device_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*DeviceHealth_Power_Value_Battery)(nil),
		(*DeviceHealth_Power_Value_Pluggedin)(nil),
	}
	file_toit_model_device_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*DeviceEvent_Initiater_Device_)(nil),
		(*DeviceEvent_Initiater_Console_)(nil),
		(*DeviceEvent_Initiater_User_)(nil),
	}
	file_toit_model_device_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*DeviceEvent_Info_Value_Primitive_)(nil),
		(*DeviceEvent_Info_Value_Diff_)(nil),
		(*DeviceEvent_Info_Value_Error_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_toit_model_device_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_toit_model_device_proto_goTypes,
		DependencyIndexes: file_toit_model_device_proto_depIdxs,
		EnumInfos:         file_toit_model_device_proto_enumTypes,
		MessageInfos:      file_toit_model_device_proto_msgTypes,
	}.Build()
	File_toit_model_device_proto = out.File
	file_toit_model_device_proto_rawDesc = nil
	file_toit_model_device_proto_goTypes = nil
	file_toit_model_device_proto_depIdxs = nil
}
